
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun load (V1609)
 (let Load
  (let Start (get-time run)
   (let Result (shen-load-help (value shen-*tc*) (read-file V1609))
    (let Finish (get-time run)
     (let Time (- Finish Start)
      (let Message (intoutput "~%run time: ~A secs~%" (@p Time ()))
       Result)))))
  (let Infs
   (if (value shen-*tc*)
    (intoutput "~%typechecked in ~A inferences~%" (@p (inferences _) ()))
    shen-skip)
   loaded)))

(defun shen-load-help (V1614 V1615)
 (cond
  ((= false V1614)
   (map (lambda X (intoutput "~S~%" (@p (eval-without-macros X) ()))) V1615))
  (true
   (let RemoveSynonyms
    (mapcan (lambda V1616 (shen-remove-synonyms V1616)) V1615)
    (let Table (mapcan (lambda V1617 (shen-typetable V1617)) RemoveSynonyms)
     (let Assume (map (lambda V1618 (shen-assumetype V1618)) Table)
      (trap-error
       (map (lambda V1619 (shen-typecheck-and-load V1619)) RemoveSynonyms)
       (lambda E (shen-unwind-types E Table)))))))))

(defun shen-remove-synonyms (V1620)
 (cond
  ((and (cons? V1620) (= shen-synonyms-help (hd V1620)))
   (do (eval V1620) ()))
  (true (cons V1620 ()))))

(defun shen-typecheck-and-load (V1621)
 (do (nl 1) (shen-typecheck-and-evaluate V1621 (gensym A))))

(defun shen-typetable (V1626)
 (cond
  ((and (cons? V1626) (and (= define (hd V1626)) (cons? (tl V1626))))
   (let Sig
    (compile (lambda V1627 (shen-<sig+rest> V1627)) (tl (tl V1626)) ())
    (if (= Sig fail!)
     (interror "~A lacks a proper signature.~%" (@p (hd (tl V1626)) ()))
     (cons (cons (hd (tl V1626)) Sig) ()))))
  (true ())))

(defun shen-assumetype (V1628)
 (cond ((cons? V1628) (declare (hd V1628) (tl V1628)))
  (true (shen-sys-error shen-assumetype))))

(defun shen-unwind-types (V1633 V1634)
 (cond ((= () V1634) (simple-error (error-to-string V1633)))
  ((and (cons? V1634) (cons? (hd V1634)))
   (do (shen-remtype (hd (hd V1634))) (shen-unwind-types V1633 (tl V1634))))
  (true (shen-sys-error shen-unwind-types))))

(defun shen-remtype (V1635)
 (do (set shen-*signedfuncs* (remove V1635 (value shen-*signedfuncs*))) V1635))

(defun shen-<sig+rest> (V1636)
 (let Result
  (let Parse_<signature> (shen-<signature> V1636)
   (if (not (= (fail) Parse_<signature>))
    (let Parse_<any> (shen-<any> Parse_<signature>)
     (if (not (= (fail) Parse_<any>))
      (shen-reassemble (fst Parse_<any>) (snd Parse_<signature>)) (fail)))
    (fail)))
  (if (= Result (fail)) (fail) Result)))

(defun dump (V1637 V1638)
 (let Shen (read-file V1637)
  (let KL (map (lambda V1639 (shen-shen-out V1639)) Shen)
   (let ObjectFile (cn V1637 (cn "." V1638))
    (let Stream (open file ObjectFile out)
     (let Dump (shen-dump-target Stream V1638 KL)
      (let Close (close Stream) ObjectFile)))))))

(defun shen-shen-out (V1640)
 (cond
  ((and (cons? V1640) (and (= define (hd V1640)) (cons? (tl V1640))))
   (shen-shen->kl (hd (tl V1640)) (tl (tl V1640))))
  (true V1640)))

(defun shen-dump-target (V1649 V1650 V1651)
 (cond ((= "kl" V1650) (shen-write-object-code-to-file V1649 V1651))
  ((= "cl" V1650)
   (shen-write-object-code-to-file V1649
    (map (lambda X (shen-kl-to-lisp () X)) V1651)))
  (true (interror "~A is not known as a platform~%" (@p V1650 ())))))

(defun shen-write-object-code-to-file (V1652 V1653)
 (map
  (lambda X
   (let String (intmake-string "~R~%~%" (@p X ())) (pr String V1652)))
  V1653))

(defun write-to-file (V1654 V1655)
 (let AbsPath
  (intmake-string "~A~A" (@p (value *home-directory*) (@p V1654 ())))
  (let Stream (open file AbsPath out)
   (let String (intmake-string "~S~%~%" (@p V1655 ()))
    (let Write (pr String Stream) (let Close (close Stream) V1655))))))

