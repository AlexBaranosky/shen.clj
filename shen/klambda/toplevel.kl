
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun shen-shen () (do (shen-credits) (shen-loop)))

(defun shen-loop ()
 (do (shen-initialise_environment)
  (do (shen-prompt)
   (do
    (trap-error (shen-read-evaluate-print)
     (lambda E (pr (error-to-string E) (value *stinput*))))
    (shen-loop)))))

(defun version (V4212) (set *version* V4212))

(version "version 5.0")

(defun shen-credits ()
 (do (intoutput "~%Shen 2010, copyright (C) 2010 Mark Tarver~%" ())
  (do (intoutput "www.shenlanguage.org, ~A~%" (@p (value *version*) ()))
   (do
    (intoutput "running under ~A, implementation: ~A"
     (@p (value *language*) (@p (value *implementation*) ())))
    (intoutput "~%port ~A ported by ~A~%"
     (@p (value *port*) (@p (value *porters*) ())))))))

(defun shen-initialise_environment ()
 (shen-multiple-set
  (cons shen-*call*
   (cons 0
    (cons shen-*infs*
     (cons 0
      (cons shen-*dumped*
       (cons ()
        (cons shen-*process-counter*
         (cons 0 (cons shen-*catch* (cons 0 ()))))))))))))

(defun shen-multiple-set (V4213)
 (cond ((= () V4213) ())
  ((and (cons? V4213) (cons? (tl V4213)))
   (do (set (hd V4213) (hd (tl V4213))) (shen-multiple-set (tl (tl V4213)))))
  (true (shen-sys-error shen-multiple-set))))

(defun destroy (V4214) (declare V4214 ()))

(set shen-*history* ())

(defun shen-read-evaluate-print ()
 (let Lineread (shen-toplineread)
  (let History (value shen-*history*)
   (let NewLineread (shen-retrieve-from-history-if-needed Lineread History)
    (let NewHistory (shen-update_history NewLineread History)
     (let Parsed (fst NewLineread) (shen-toplevel Parsed)))))))

(defun shen-retrieve-from-history-if-needed (V4224 V4225)
 (cond
  ((and (tuple? V4224)
    (and (cons? (snd V4224))
     (and (cons? (tl (snd V4224)))
      (and (= () (tl (tl (snd V4224))))
       (and (cons? V4225)
        (and (= (hd (snd V4224)) (shen-exclamation))
         (= (hd (tl (snd V4224))) (shen-exclamation))))))))
   (let PastPrint (shen-prbytes (snd (hd V4225))) (hd V4225)))
  ((and (tuple? V4224)
    (and (cons? (snd V4224)) (= (hd (snd V4224)) (shen-exclamation))))
   (let Key? (shen-make-key (tl (snd V4224)) V4225)
    (let Find (head (shen-find-past-inputs Key? V4225))
     (let PastPrint (shen-prbytes (snd Find)) Find))))
  ((and (tuple? V4224)
    (and (cons? (snd V4224))
     (and (= () (tl (snd V4224))) (= (hd (snd V4224)) (shen-percent)))))
   (do (shen-print-past-inputs (lambda X true) (reverse V4225) 0) (abort)))
  ((and (tuple? V4224)
    (and (cons? (snd V4224)) (= (hd (snd V4224)) (shen-percent))))
   (let Key? (shen-make-key (tl (snd V4224)) V4225)
    (let Pastprint (shen-print-past-inputs Key? (reverse V4225) 0) (abort))))
  (true V4224)))

(defun shen-percent () 37)

(defun shen-exclamation () 33)

(defun shen-prbytes (V4226)
 (do (map (lambda Byte (pr (n->string Byte) (stinput 0))) V4226) (nl 1)))

(defun shen-update_history (V4227 V4228)
 (set shen-*history* (cons V4227 V4228)))

(defun shen-toplineread ()
 (shen-toplineread_loop (read-byte (stinput 0)) ()))

(defun shen-toplineread_loop (V4230 V4231)
 (cond ((= V4230 (shen-hat)) (interror "line read aborted" ()))
  ((element? V4230 (cons (shen-newline) (cons (shen-carriage-return) ())))
   (let Line (compile (lambda V4232 (shen-<st_input> V4232)) V4231 ())
    (if (or (= Line fail!) (empty? Line))
     (shen-toplineread_loop (read-byte (stinput 0))
      (append V4231 (cons V4230 ())))
     (@p Line V4231))))
  (true
   (shen-toplineread_loop (read-byte (stinput 0))
    (append V4231 (cons V4230 ()))))))

(defun shen-hat () 94)

(defun shen-newline () 10)

(defun shen-carriage-return () 13)

(defun tc (V4237)
 (cond ((= + V4237) (set shen-*tc* true))
  ((= - V4237) (set shen-*tc* false))
  (true (interror "tc expects a + or -" ()))))

(defun shen-prompt ()
 (if (value shen-*tc*)
  (intoutput "~%~%(~A+) " (@p (length (value shen-*history*)) ()))
  (intoutput "~%~%(~A-) " (@p (length (value shen-*history*)) ()))))

(defun shen-toplevel (V4238) (shen-toplevel_evaluate V4238 (value shen-*tc*)))

(defun shen-find-past-inputs (V4239 V4240)
 (let F (shen-find V4239 V4240)
  (if (empty? F) (interror "input not found~%" ()) F)))

(defun shen-make-key (V4241 V4242)
 (let Atom (hd (compile (lambda V4243 (shen-<st_input> V4243)) V4241 ()))
  (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V4242))))
   (lambda X (shen-prefix? V4241 (shen-trim-gubbins (snd X)))))))

(defun shen-trim-gubbins (V4244)
 (cond
  ((and (cons? V4244) (= (hd V4244) (shen-space)))
   (shen-trim-gubbins (tl V4244)))
  ((and (cons? V4244) (= (hd V4244) (shen-newline)))
   (shen-trim-gubbins (tl V4244)))
  ((and (cons? V4244) (= (hd V4244) (shen-carriage-return)))
   (shen-trim-gubbins (tl V4244)))
  ((and (cons? V4244) (= (hd V4244) (shen-tab)))
   (shen-trim-gubbins (tl V4244)))
  ((and (cons? V4244) (= (hd V4244) (shen-left-round)))
   (shen-trim-gubbins (tl V4244)))
  (true V4244)))

(defun shen-space () 32)

(defun shen-tab () 9)

(defun shen-left-round () 40)

(defun shen-find (V4251 V4252)
 (cond ((= () V4252) ())
  ((and (cons? V4252) (V4251 (hd V4252)))
   (cons (hd V4252) (shen-find V4251 (tl V4252))))
  ((cons? V4252) (shen-find V4251 (tl V4252)))
  (true (shen-sys-error shen-find))))

(defun shen-prefix? (V4263 V4264)
 (cond ((= () V4263) true)
  ((and (cons? V4263) (and (cons? V4264) (= (hd V4264) (hd V4263))))
   (shen-prefix? (tl V4263) (tl V4264)))
  (true false)))

(defun shen-print-past-inputs (V4274 V4275 V4276)
 (cond ((= () V4275) _)
  ((and (cons? V4275) (not (V4274 (hd V4275))))
   (shen-print-past-inputs V4274 (tl V4275) (+ V4276 1)))
  ((and (cons? V4275) (tuple? (hd V4275)))
   (do (intoutput "~A. " (@p V4276 ()))
    (do (shen-prbytes (snd (hd V4275)))
     (shen-print-past-inputs V4274 (tl V4275) (+ V4276 1)))))
  (true (shen-sys-error shen-print-past-inputs))))

(defun shen-toplevel_evaluate (V4277 V4278)
 (cond
  ((and (cons? V4277)
    (and (cons? (tl V4277))
     (and (= : (hd (tl V4277)))
      (and (cons? (tl (tl V4277)))
       (and (= () (tl (tl (tl V4277)))) (= true V4278))))))
   (shen-typecheck-and-evaluate (hd V4277) (hd (tl (tl V4277)))))
  ((and (cons? V4277) (cons? (tl V4277)))
   (do (shen-toplevel_evaluate (cons (hd V4277) ()) V4278)
    (do (if (= (value shen-*hush*) shen-hushed) shen-skip (nl 1))
     (shen-toplevel_evaluate (tl V4277) V4278))))
  ((and (cons? V4277) (and (= () (tl V4277)) (= true V4278)))
   (shen-typecheck-and-evaluate (hd V4277) (gensym A)))
  ((and (cons? V4277) (and (= () (tl V4277)) (= false V4278)))
   (let Eval (shen-eval-without-macros (hd V4277))
    (if (or (= (value shen-*hush*) shen-hushed) (= Eval shen-unhushed))
     shen-skip (print Eval))))
  (true (shen-sys-error shen-toplevel_evaluate))))

(defun shen-typecheck-and-evaluate (V4279 V4280)
 (let Typecheck (shen-typecheck V4279 V4280)
  (if (= Typecheck false) (interror "type error~%" ())
   (let Eval (shen-eval-without-macros V4279)
    (let Type (shen-pretty-type Typecheck)
     (if (or (= (value shen-*hush*) shen-hushed) (= V4279 shen-unhushed))
      shen-skip (intoutput "~S : ~R" (@p Eval (@p Type ())))))))))

(defun shen-pretty-type (V4281)
 (shen-mult_subst (value shen-*alphabet*) (shen-extract-pvars V4281) V4281))

(defun shen-extract-pvars (V4286)
 (cond ((shen-pvar? V4286) (cons V4286 ()))
  ((cons? V4286)
   (union (shen-extract-pvars (hd V4286)) (shen-extract-pvars (tl V4286))))
  (true ())))

(defun shen-mult_subst (V4291 V4292 V4293)
 (cond ((= () V4291) V4293) ((= () V4292) V4293)
  ((and (cons? V4291) (cons? V4292))
   (shen-mult_subst (tl V4291) (tl V4292) (subst (hd V4291) (hd V4292) V4293)))
  (true (shen-sys-error shen-mult_subst))))

