
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun shen-datatype-error (V1505)
 (interror "datatype syntax error here:~%~% ~A~%"
  (@p (shen-next-50 50 V1505) ())))

(defun shen-<datatype-rules> (V1506)
 (let Result
  (let Parse_<datatype-rule> (shen-<datatype-rule> V1506)
   (if (not (= (fail) Parse_<datatype-rule>))
    (let Parse_<datatype-rules> (shen-<datatype-rules> Parse_<datatype-rule>)
     (if (not (= (fail) Parse_<datatype-rules>))
      (shen-reassemble (fst Parse_<datatype-rules>)
       (cons (snd Parse_<datatype-rule>) (snd Parse_<datatype-rules>)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V1506)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<datatype-rule> (V1507)
 (let Result
  (let Parse_<side-conditions> (shen-<side-conditions> V1507)
   (if (not (= (fail) Parse_<side-conditions>))
    (let Parse_<premises> (shen-<premises> Parse_<side-conditions>)
     (if (not (= (fail) Parse_<premises>))
      (let Parse_<singleunderline> (shen-<singleunderline> Parse_<premises>)
       (if (not (= (fail) Parse_<singleunderline>))
        (let Parse_<conclusion> (shen-<conclusion> Parse_<singleunderline>)
         (if (not (= (fail) Parse_<conclusion>))
          (shen-reassemble (fst Parse_<conclusion>)
           (@p shen-single
            (cons (snd Parse_<side-conditions>)
             (cons (snd Parse_<premises>)
              (cons (snd Parse_<conclusion>) ())))))
          (fail)))
        (fail)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<side-conditions> (shen-<side-conditions> V1507)
     (if (not (= (fail) Parse_<side-conditions>))
      (let Parse_<premises> (shen-<premises> Parse_<side-conditions>)
       (if (not (= (fail) Parse_<premises>))
        (let Parse_<doubleunderline> (shen-<doubleunderline> Parse_<premises>)
         (if (not (= (fail) Parse_<doubleunderline>))
          (let Parse_<conclusion> (shen-<conclusion> Parse_<doubleunderline>)
           (if (not (= (fail) Parse_<conclusion>))
            (shen-reassemble (fst Parse_<conclusion>)
             (@p shen-double
              (cons (snd Parse_<side-conditions>)
               (cons (snd Parse_<premises>)
                (cons (snd Parse_<conclusion>) ())))))
            (fail)))
          (fail)))
        (fail)))
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<side-conditions> (V1508)
 (let Result
  (let Parse_<side-condition> (shen-<side-condition> V1508)
   (if (not (= (fail) Parse_<side-condition>))
    (let Parse_<side-conditions>
     (shen-<side-conditions> Parse_<side-condition>)
     (if (not (= (fail) Parse_<side-conditions>))
      (shen-reassemble (fst Parse_<side-conditions>)
       (cons (snd Parse_<side-condition>) (snd Parse_<side-conditions>)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V1508)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<side-condition> (V1509)
 (let Result
  (if (and (cons? (fst V1509)) (= if (hd (fst V1509))))
   (let Parse_<expr>
    (shen-<expr> (shen-reassemble (tl (fst V1509)) (snd V1509)))
    (if (not (= (fail) Parse_<expr>))
     (shen-reassemble (fst Parse_<expr>)
      (cons if (cons (snd Parse_<expr>) ())))
     (fail)))
   (fail))
  (if (= Result (fail))
   (let Result
    (if (and (cons? (fst V1509)) (= let (hd (fst V1509))))
     (let Parse_<variable?>
      (shen-<variable?> (shen-reassemble (tl (fst V1509)) (snd V1509)))
      (if (not (= (fail) Parse_<variable?>))
       (let Parse_<expr> (shen-<expr> Parse_<variable?>)
        (if (not (= (fail) Parse_<expr>))
         (shen-reassemble (fst Parse_<expr>)
          (cons let
           (cons (snd Parse_<variable?>) (cons (snd Parse_<expr>) ()))))
         (fail)))
       (fail)))
     (fail))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<variable?> (V1510)
 (let Result
  (if (cons? (fst V1510))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1510)) (snd V1510)))
    (if (not (variable? (hd (fst V1510)))) (fail) (hd (fst V1510))))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<expr> (V1511)
 (let Result
  (if (cons? (fst V1511))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1511)) (snd V1511)))
    (if
     (or (element? (hd (fst V1511)) (cons >> (cons ; ())))
      (or (shen-singleunderline? (hd (fst V1511)))
       (shen-doubleunderline? (hd (fst V1511)))))
     (fail) (shen-remove-bar (hd (fst V1511)))))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-remove-bar (V1512)
 (cond
  ((and (cons? V1512)
    (and (cons? (tl V1512))
     (and (cons? (tl (tl V1512)))
      (and (= () (tl (tl (tl V1512)))) (= (hd (tl V1512)) bar!)))))
   (cons (hd V1512) (hd (tl (tl V1512)))))
  ((cons? V1512)
   (cons (shen-remove-bar (hd V1512)) (shen-remove-bar (tl V1512))))
  (true V1512)))

(defun shen-<premises> (V1513)
 (let Result
  (let Parse_<premise> (shen-<premise> V1513)
   (if (not (= (fail) Parse_<premise>))
    (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<premise>)
     (if (not (= (fail) Parse_<semicolon-symbol>))
      (let Parse_<premises> (shen-<premises> Parse_<semicolon-symbol>)
       (if (not (= (fail) Parse_<premises>))
        (shen-reassemble (fst Parse_<premises>)
         (cons (snd Parse_<premise>) (snd Parse_<premises>)))
        (fail)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V1513)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<semicolon-symbol> (V1514)
 (let Result
  (if (cons? (fst V1514))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1514)) (snd V1514)))
    (if (= (hd (fst V1514)) ;) shen-skip (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<premise> (V1515)
 (let Result
  (if (and (cons? (fst V1515)) (= ! (hd (fst V1515))))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1515)) (snd V1515))) !)
   (fail))
  (if (= Result (fail))
   (let Result
    (let Parse_<formulae> (shen-<formulae> V1515)
     (if (not (= (fail) Parse_<formulae>))
      (if
       (and (cons? (fst Parse_<formulae>))
        (= >> (hd (fst Parse_<formulae>))))
       (let Parse_<formula>
        (shen-<formula>
         (shen-reassemble (tl (fst Parse_<formulae>)) (snd Parse_<formulae>)))
        (if (not (= (fail) Parse_<formula>))
         (shen-reassemble (fst Parse_<formula>)
          (@p (snd Parse_<formulae>) (snd Parse_<formula>)))
         (fail)))
       (fail))
      (fail)))
    (if (= Result (fail))
     (let Result
      (let Parse_<formula> (shen-<formula> V1515)
       (if (not (= (fail) Parse_<formula>))
        (shen-reassemble (fst Parse_<formula>) (@p () (snd Parse_<formula>)))
        (fail)))
      (if (= Result (fail)) (fail) Result))
     Result))
   Result)))

(defun shen-<conclusion> (V1516)
 (let Result
  (let Parse_<formulae> (shen-<formulae> V1516)
   (if (not (= (fail) Parse_<formulae>))
    (if
     (and (cons? (fst Parse_<formulae>)) (= >> (hd (fst Parse_<formulae>))))
     (let Parse_<formula>
      (shen-<formula>
       (shen-reassemble (tl (fst Parse_<formulae>)) (snd Parse_<formulae>)))
      (if (not (= (fail) Parse_<formula>))
       (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<formula>)
        (if (not (= (fail) Parse_<semicolon-symbol>))
         (shen-reassemble (fst Parse_<semicolon-symbol>)
          (@p (snd Parse_<formulae>) (snd Parse_<formula>)))
         (fail)))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<formula> (shen-<formula> V1516)
     (if (not (= (fail) Parse_<formula>))
      (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<formula>)
       (if (not (= (fail) Parse_<semicolon-symbol>))
        (shen-reassemble (fst Parse_<semicolon-symbol>)
         (@p () (snd Parse_<formula>)))
        (fail)))
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<formulae> (V1517)
 (let Result
  (let Parse_<formula> (shen-<formula> V1517)
   (if (not (= (fail) Parse_<formula>))
    (if
     (and (cons? (fst Parse_<formula>))
      (= shen- (hd (fst Parse_<formula>))))
     (let Parse_<formulae>
      (shen-<formulae>
       (shen-reassemble (tl (fst Parse_<formula>)) (snd Parse_<formula>)))
      (if (not (= (fail) Parse_<formulae>))
       (shen-reassemble (fst Parse_<formulae>)
        (cons (snd Parse_<formula>) (snd Parse_<formulae>)))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<formula> (shen-<formula> V1517)
     (if (not (= (fail) Parse_<formula>))
      (shen-reassemble (fst Parse_<formula>) (cons (snd Parse_<formula>) ()))
      (fail)))
    (if (= Result (fail))
     (let Result
      (let Parse_<e> (<e> V1517)
       (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
        (fail)))
      (if (= Result (fail)) (fail) Result))
     Result))
   Result)))

(defun shen-<formula> (V1518)
 (let Result
  (let Parse_<expr> (shen-<expr> V1518)
   (if (not (= (fail) Parse_<expr>))
    (if (and (cons? (fst Parse_<expr>)) (= : (hd (fst Parse_<expr>))))
     (let Parse_<type>
      (shen-<type>
       (shen-reassemble (tl (fst Parse_<expr>)) (snd Parse_<expr>)))
      (if (not (= (fail) Parse_<type>))
       (shen-reassemble (fst Parse_<type>)
        (cons (shen-curry (snd Parse_<expr>))
         (cons : (cons (shen-normalise-type (snd Parse_<type>)) ()))))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<expr> (shen-<expr> V1518)
     (if (not (= (fail) Parse_<expr>))
      (shen-reassemble (fst Parse_<expr>) (snd Parse_<expr>)) (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<colonsymbol> (V1519)
 (let Result
  (if (cons? (fst V1519))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1519)) (snd V1519)))
    (if (= (hd (fst V1519)) ;) (hd (fst V1519)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<type> (V1520)
 (let Result
  (let Parse_<expr> (shen-<expr> V1520)
   (if (not (= (fail) Parse_<expr>))
    (shen-reassemble (fst Parse_<expr>) (shen-curry-type (snd Parse_<expr>)))
    (fail)))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<doubleunderline> (V1521)
 (let Result
  (if (cons? (fst V1521))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1521)) (snd V1521)))
    (if (shen-doubleunderline? (hd (fst V1521))) (hd (fst V1521)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<singleunderline> (V1522)
 (let Result
  (if (cons? (fst V1522))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1522)) (snd V1522)))
    (if (shen-singleunderline? (hd (fst V1522))) (hd (fst V1522)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-singleunderline? (V1523)
 (and (symbol? V1523) (shen-sh? (str V1523))))

(defun shen-sh? (V1524)
 (cond ((= "_" V1524) true)
  (true (and (= (pos V1524 0) "_") (shen-sh? (tlstr V1524))))))

(defun shen-doubleunderline? (V1525)
 (and (symbol? V1525) (shen-dh? (str V1525))))

(defun shen-dh? (V1526)
 (cond ((= "=" V1526) true)
  (true (and (= (pos V1526 0) "=") (shen-dh? (tlstr V1526))))))

(defun shen-process-datatype (V1527 V1528)
 (shen-remember-datatype
  (shen-s-prolog (shen-rules->horn-clauses V1527 V1528))))

(defun shen-remember-datatype (V1533)
 (cond
  ((cons? V1533)
   (do (set shen-*datatypes* (adjoin (hd V1533) (value shen-*datatypes*)))
    (do
     (set shen-*alldatatypes* (adjoin (hd V1533) (value shen-*alldatatypes*)))
     (hd V1533))))
  (true (shen-sys-error shen-remember-datatype))))

(defun shen-rules->horn-clauses (V1536 V1537)
 (cond ((= () V1537) ())
  ((and (cons? V1537)
    (and (tuple? (hd V1537)) (= shen-single (fst (hd V1537)))))
   (cons (shen-rule->horn-clause V1536 (snd (hd V1537)))
    (shen-rules->horn-clauses V1536 (tl V1537))))
  ((and (cons? V1537)
    (and (tuple? (hd V1537)) (= shen-double (fst (hd V1537)))))
   (shen-rules->horn-clauses V1536
    (append (shen-double->singles (snd (hd V1537))) (tl V1537))))
  (true (shen-sys-error shen-rules->horn-clauses))))

(defun shen-double->singles (V1538)
 (cons (shen-right-rule V1538) (cons (shen-left-rule V1538) ())))

(defun shen-right-rule (V1539) (@p shen-single V1539))

(defun shen-left-rule (V1540)
 (cond
  ((and (cons? V1540)
    (and (cons? (tl V1540))
     (and (cons? (tl (tl V1540)))
      (and (tuple? (hd (tl (tl V1540))))
       (and (= () (fst (hd (tl (tl V1540)))))
        (= () (tl (tl (tl V1540)))))))))
   (let Q (gensym Qv)
    (let NewConclusion (@p (cons (snd (hd (tl (tl V1540)))) ()) Q)
     (let NewPremises
      (cons
       (@p (map (lambda V1541 (shen-right->left V1541)) (hd (tl V1540))) Q)
       ())
      (@p shen-single
       (cons (hd V1540) (cons NewPremises (cons NewConclusion ()))))))))
  (true (shen-sys-error shen-left-rule))))

(defun shen-right->left (V1546)
 (cond ((and (tuple? V1546) (= () (fst V1546))) (snd V1546))
  (true (interror "syntax error with ==========~%" ()))))

(defun shen-rule->horn-clause (V1547 V1548)
 (cond
  ((and (cons? V1548)
    (and (cons? (tl V1548))
     (and (cons? (tl (tl V1548)))
      (and (tuple? (hd (tl (tl V1548)))) (= () (tl (tl (tl V1548))))))))
   (cons (shen-rule->horn-clause-head V1547 (snd (hd (tl (tl V1548)))))
    (cons :-
     (cons
      (shen-rule->horn-clause-body (hd V1548) (hd (tl V1548))
       (fst (hd (tl (tl V1548)))))
      ()))))
  (true (shen-sys-error shen-rule->horn-clause))))

(defun shen-rule->horn-clause-head (V1549 V1550)
 (cons V1549 (cons (shen-mode-ify V1550) (cons Context_1957 ()))))

(defun shen-mode-ify (V1551)
 (cond
  ((and (cons? V1551)
    (and (cons? (tl V1551))
     (and (= : (hd (tl V1551)))
      (and (cons? (tl (tl V1551))) (= () (tl (tl (tl V1551))))))))
   (cons mode
    (cons
     (cons (hd V1551)
      (cons :
       (cons (cons mode (cons (hd (tl (tl V1551))) (cons + ()))) ())))
     (cons - ()))))
  (true V1551)))

(defun shen-rule->horn-clause-body (V1552 V1553 V1554)
 (let Variables (map (lambda V1555 (shen-extract_vars V1555)) V1554)
  (let Predicates (map (lambda X (gensym shen-cl)) V1554)
   (let SearchLiterals
    (shen-construct-search-literals Predicates Variables Context_1957
     Context1_1957)
    (let SearchClauses
     (shen-construct-search-clauses Predicates V1554 Variables)
     (let SideLiterals (shen-construct-side-literals V1552)
      (let PremissLiterals
       (map (lambda X (shen-construct-premiss-literal X (empty? V1554))) V1553)
       (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen-construct-search-literals (V1560 V1561 V1562 V1563)
 (cond ((and (= () V1560) (= () V1561)) ())
  (true (shen-csl-help V1560 V1561 V1562 V1563))))

(defun shen-csl-help (V1566 V1567 V1568 V1569)
 (cond
  ((and (= () V1566) (= () V1567))
   (cons (cons bind (cons ContextOut_1957 (cons V1568 ()))) ()))
  ((and (cons? V1566) (cons? V1567))
   (cons (cons (hd V1566) (cons V1568 (cons V1569 (hd V1567))))
    (shen-csl-help (tl V1566) (tl V1567) V1569 (gensym Context))))
  (true (shen-sys-error shen-csl-help))))

(defun shen-construct-search-clauses (V1570 V1571 V1572)
 (cond
  ((and (= () V1570) (and (= () V1571) (= () V1572))) shen-skip)
  ((and (cons? V1570) (and (cons? V1571) (cons? V1572)))
   (do (shen-construct-search-clause (hd V1570) (hd V1571) (hd V1572))
    (shen-construct-search-clauses (tl V1570) (tl V1571) (tl V1572))))
  (true (shen-sys-error shen-construct-search-clauses))))

(defun shen-construct-search-clause (V1573 V1574 V1575)
 (shen-s-prolog
  (cons (shen-construct-base-search-clause V1573 V1574 V1575)
   (cons (shen-construct-recursive-search-clause V1573 V1574 V1575) ()))))

(defun shen-construct-base-search-clause (V1576 V1577 V1578)
 (cons
  (cons V1576 (cons (cons (shen-mode-ify V1577) In_1957) (cons In_1957 V1578)))
  (cons :- (cons () ()))))

(defun shen-construct-recursive-search-clause (V1579 V1580 V1581)
 (cons
  (cons V1579
   (cons (cons Assumption_1957 Assumptions_1957)
    (cons (cons Assumption_1957 Out_1957) V1581)))
  (cons :-
   (cons (cons (cons V1579 (cons Assumptions_1957 (cons Out_1957 V1581))) ())
    ()))))

(defun shen-construct-side-literals (V1586)
 (cond ((= () V1586) ())
  ((and (cons? V1586)
    (and (cons? (hd V1586))
     (and (= if (hd (hd V1586)))
      (and (cons? (tl (hd V1586))) (= () (tl (tl (hd V1586))))))))
   (cons (cons when (tl (hd V1586)))
    (shen-construct-side-literals (tl V1586))))
  ((and (cons? V1586)
    (and (cons? (hd V1586))
     (and (= let (hd (hd V1586)))
      (and (cons? (tl (hd V1586)))
       (and (cons? (tl (tl (hd V1586))))
        (= () (tl (tl (tl (hd V1586))))))))))
   (cons (cons is (tl (hd V1586))) (shen-construct-side-literals (tl V1586))))
  ((cons? V1586) (shen-construct-side-literals (tl V1586)))
  (true (shen-sys-error shen-construct-side-literals))))

(defun shen-construct-premiss-literal (V1591 V1592)
 (cond
  ((tuple? V1591)
   (cons shen-t*
    (cons (shen-recursive_cons_form (snd V1591))
     (cons (shen-construct-context V1592 (fst V1591)) ()))))
  ((= ! V1591) (cons cut (cons Throwcontrol ())))
  (true (shen-sys-error shen-construct-premiss-literal))))

(defun shen-construct-context (V1593 V1594)
 (cond ((and (= true V1593) (= () V1594)) Context_1957)
  ((and (= false V1593) (= () V1594)) ContextOut_1957)
  ((cons? V1594)
   (cons cons
    (cons (shen-recursive_cons_form (hd V1594))
     (cons (shen-construct-context V1593 (tl V1594)) ()))))
  (true (shen-sys-error shen-construct-context))))

(defun shen-recursive_cons_form (V1595)
 (cond
  ((cons? V1595)
   (cons cons
    (cons (shen-recursive_cons_form (hd V1595))
     (cons (shen-recursive_cons_form (tl V1595)) ()))))
  (true V1595)))

(defun preclude (V1596)
 (let FilterDatatypes
  (set shen-*datatypes* (difference (value shen-*datatypes*) V1596))
  (value shen-*datatypes*)))

(defun include (V1597)
 (let ValidTypes (intersection V1597 (value shen-*alldatatypes*))
  (let NewDatatypes
   (set shen-*datatypes* (union ValidTypes (value shen-*datatypes*)))
   (value shen-*datatypes*))))

(defun preclude-all-but (V1598)
 (preclude (difference (value shen-*alldatatypes*) V1598)))

(defun include-all-but (V1599)
 (include (difference (value shen-*alldatatypes*) V1599)))

(defun shen-synonyms-help (V1604)
 (cond ((= () V1604) synonyms)
  ((and (cons? V1604) (cons? (tl V1604)))
   (do (shen-pushnew (cons (hd V1604) (hd (tl V1604))) shen-*synonyms*)
    (shen-synonyms-help (tl (tl V1604)))))
  (true (interror "odd number of synonyms~%" (@p () ())))))

(defun shen-pushnew (V1605 V1606)
 (if (element? V1605 (value V1606)) (value V1606)
  (set V1606 (cons V1605 (value V1606)))))

