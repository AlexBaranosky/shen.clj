
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun shen-datatype-error (V1545)
 (interror "datatype syntax error here:~%~% ~A~%"
  (@p (shen-next-50 50 V1545) ())))

(defun shen-<datatype-rules> (V1546)
 (let Result
  (let Parse_<datatype-rule> (shen-<datatype-rule> V1546)
   (if (not (= (fail) Parse_<datatype-rule>))
    (let Parse_<datatype-rules> (shen-<datatype-rules> Parse_<datatype-rule>)
     (if (not (= (fail) Parse_<datatype-rules>))
      (shen-reassemble (fst Parse_<datatype-rules>)
       (cons (snd Parse_<datatype-rule>) (snd Parse_<datatype-rules>)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V1546)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<datatype-rule> (V1547)
 (let Result
  (let Parse_<side-conditions> (shen-<side-conditions> V1547)
   (if (not (= (fail) Parse_<side-conditions>))
    (let Parse_<premises> (shen-<premises> Parse_<side-conditions>)
     (if (not (= (fail) Parse_<premises>))
      (let Parse_<singleunderline> (shen-<singleunderline> Parse_<premises>)
       (if (not (= (fail) Parse_<singleunderline>))
        (let Parse_<conclusion> (shen-<conclusion> Parse_<singleunderline>)
         (if (not (= (fail) Parse_<conclusion>))
          (shen-reassemble (fst Parse_<conclusion>)
           (@p shen-single
            (cons (snd Parse_<side-conditions>)
             (cons (snd Parse_<premises>)
              (cons (snd Parse_<conclusion>) ())))))
          (fail)))
        (fail)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<side-conditions> (shen-<side-conditions> V1547)
     (if (not (= (fail) Parse_<side-conditions>))
      (let Parse_<premises> (shen-<premises> Parse_<side-conditions>)
       (if (not (= (fail) Parse_<premises>))
        (let Parse_<doubleunderline> (shen-<doubleunderline> Parse_<premises>)
         (if (not (= (fail) Parse_<doubleunderline>))
          (let Parse_<conclusion> (shen-<conclusion> Parse_<doubleunderline>)
           (if (not (= (fail) Parse_<conclusion>))
            (shen-reassemble (fst Parse_<conclusion>)
             (@p shen-double
              (cons (snd Parse_<side-conditions>)
               (cons (snd Parse_<premises>)
                (cons (snd Parse_<conclusion>) ())))))
            (fail)))
          (fail)))
        (fail)))
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<side-conditions> (V1548)
 (let Result
  (let Parse_<side-condition> (shen-<side-condition> V1548)
   (if (not (= (fail) Parse_<side-condition>))
    (let Parse_<side-conditions>
     (shen-<side-conditions> Parse_<side-condition>)
     (if (not (= (fail) Parse_<side-conditions>))
      (shen-reassemble (fst Parse_<side-conditions>)
       (cons (snd Parse_<side-condition>) (snd Parse_<side-conditions>)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V1548)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<side-condition> (V1549)
 (let Result
  (if (and (cons? (fst V1549)) (= if (hd (fst V1549))))
   (let Parse_<expr>
    (shen-<expr> (shen-reassemble (tl (fst V1549)) (snd V1549)))
    (if (not (= (fail) Parse_<expr>))
     (shen-reassemble (fst Parse_<expr>)
      (cons if (cons (snd Parse_<expr>) ())))
     (fail)))
   (fail))
  (if (= Result (fail))
   (let Result
    (if (and (cons? (fst V1549)) (= let (hd (fst V1549))))
     (let Parse_<variable?>
      (shen-<variable?> (shen-reassemble (tl (fst V1549)) (snd V1549)))
      (if (not (= (fail) Parse_<variable?>))
       (let Parse_<expr> (shen-<expr> Parse_<variable?>)
        (if (not (= (fail) Parse_<expr>))
         (shen-reassemble (fst Parse_<expr>)
          (cons let
           (cons (snd Parse_<variable?>) (cons (snd Parse_<expr>) ()))))
         (fail)))
       (fail)))
     (fail))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<variable?> (V1550)
 (let Result
  (if (cons? (fst V1550))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1550)) (snd V1550)))
    (if (not (variable? (hd (fst V1550)))) (fail) (hd (fst V1550))))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<expr> (V1551)
 (let Result
  (if (cons? (fst V1551))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1551)) (snd V1551)))
    (if
     (or (element? (hd (fst V1551)) (cons >> (cons ; ())))
      (or (shen-singleunderline? (hd (fst V1551)))
       (shen-doubleunderline? (hd (fst V1551)))))
     (fail) (shen-remove-bar (hd (fst V1551)))))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-remove-bar (V1552)
 (cond
  ((and (cons? V1552)
    (and (cons? (tl V1552))
     (and (cons? (tl (tl V1552)))
      (and (= () (tl (tl (tl V1552)))) (= (hd (tl V1552)) bar!)))))
   (cons (hd V1552) (hd (tl (tl V1552)))))
  ((cons? V1552)
   (cons (shen-remove-bar (hd V1552)) (shen-remove-bar (tl V1552))))
  (true V1552)))

(defun shen-<premises> (V1553)
 (let Result
  (let Parse_<premise> (shen-<premise> V1553)
   (if (not (= (fail) Parse_<premise>))
    (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<premise>)
     (if (not (= (fail) Parse_<semicolon-symbol>))
      (let Parse_<premises> (shen-<premises> Parse_<semicolon-symbol>)
       (if (not (= (fail) Parse_<premises>))
        (shen-reassemble (fst Parse_<premises>)
         (cons (snd Parse_<premise>) (snd Parse_<premises>)))
        (fail)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V1553)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<semicolon-symbol> (V1554)
 (let Result
  (if (cons? (fst V1554))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1554)) (snd V1554)))
    (if (= (hd (fst V1554)) ;) shen-skip (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<premise> (V1555)
 (let Result
  (if (and (cons? (fst V1555)) (= ! (hd (fst V1555))))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1555)) (snd V1555))) !)
   (fail))
  (if (= Result (fail))
   (let Result
    (let Parse_<formulae> (shen-<formulae> V1555)
     (if (not (= (fail) Parse_<formulae>))
      (if
       (and (cons? (fst Parse_<formulae>))
        (= >> (hd (fst Parse_<formulae>))))
       (let Parse_<formula>
        (shen-<formula>
         (shen-reassemble (tl (fst Parse_<formulae>)) (snd Parse_<formulae>)))
        (if (not (= (fail) Parse_<formula>))
         (shen-reassemble (fst Parse_<formula>)
          (@p (snd Parse_<formulae>) (snd Parse_<formula>)))
         (fail)))
       (fail))
      (fail)))
    (if (= Result (fail))
     (let Result
      (let Parse_<formula> (shen-<formula> V1555)
       (if (not (= (fail) Parse_<formula>))
        (shen-reassemble (fst Parse_<formula>) (@p () (snd Parse_<formula>)))
        (fail)))
      (if (= Result (fail)) (fail) Result))
     Result))
   Result)))

(defun shen-<conclusion> (V1556)
 (let Result
  (let Parse_<formulae> (shen-<formulae> V1556)
   (if (not (= (fail) Parse_<formulae>))
    (if
     (and (cons? (fst Parse_<formulae>)) (= >> (hd (fst Parse_<formulae>))))
     (let Parse_<formula>
      (shen-<formula>
       (shen-reassemble (tl (fst Parse_<formulae>)) (snd Parse_<formulae>)))
      (if (not (= (fail) Parse_<formula>))
       (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<formula>)
        (if (not (= (fail) Parse_<semicolon-symbol>))
         (shen-reassemble (fst Parse_<semicolon-symbol>)
          (@p (snd Parse_<formulae>) (snd Parse_<formula>)))
         (fail)))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<formula> (shen-<formula> V1556)
     (if (not (= (fail) Parse_<formula>))
      (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<formula>)
       (if (not (= (fail) Parse_<semicolon-symbol>))
        (shen-reassemble (fst Parse_<semicolon-symbol>)
         (@p () (snd Parse_<formula>)))
        (fail)))
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<formulae> (V1557)
 (let Result
  (let Parse_<formula> (shen-<formula> V1557)
   (if (not (= (fail) Parse_<formula>))
    (if
     (and (cons? (fst Parse_<formula>))
      (= shen- (hd (fst Parse_<formula>))))
     (let Parse_<formulae>
      (shen-<formulae>
       (shen-reassemble (tl (fst Parse_<formula>)) (snd Parse_<formula>)))
      (if (not (= (fail) Parse_<formulae>))
       (shen-reassemble (fst Parse_<formulae>)
        (cons (snd Parse_<formula>) (snd Parse_<formulae>)))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<formula> (shen-<formula> V1557)
     (if (not (= (fail) Parse_<formula>))
      (shen-reassemble (fst Parse_<formula>) (cons (snd Parse_<formula>) ()))
      (fail)))
    (if (= Result (fail))
     (let Result
      (let Parse_<e> (<e> V1557)
       (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
        (fail)))
      (if (= Result (fail)) (fail) Result))
     Result))
   Result)))

(defun shen-<formula> (V1558)
 (let Result
  (let Parse_<expr> (shen-<expr> V1558)
   (if (not (= (fail) Parse_<expr>))
    (if (and (cons? (fst Parse_<expr>)) (= : (hd (fst Parse_<expr>))))
     (let Parse_<type>
      (shen-<type>
       (shen-reassemble (tl (fst Parse_<expr>)) (snd Parse_<expr>)))
      (if (not (= (fail) Parse_<type>))
       (shen-reassemble (fst Parse_<type>)
        (cons (shen-curry (snd Parse_<expr>))
         (cons : (cons (shen-normalise-type (snd Parse_<type>)) ()))))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<expr> (shen-<expr> V1558)
     (if (not (= (fail) Parse_<expr>))
      (shen-reassemble (fst Parse_<expr>) (snd Parse_<expr>)) (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<colonsymbol> (V1559)
 (let Result
  (if (cons? (fst V1559))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1559)) (snd V1559)))
    (if (= (hd (fst V1559)) ;) (hd (fst V1559)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<type> (V1560)
 (let Result
  (let Parse_<expr> (shen-<expr> V1560)
   (if (not (= (fail) Parse_<expr>))
    (shen-reassemble (fst Parse_<expr>) (shen-curry-type (snd Parse_<expr>)))
    (fail)))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<doubleunderline> (V1561)
 (let Result
  (if (cons? (fst V1561))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1561)) (snd V1561)))
    (if (shen-doubleunderline? (hd (fst V1561))) (hd (fst V1561)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<singleunderline> (V1562)
 (let Result
  (if (cons? (fst V1562))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1562)) (snd V1562)))
    (if (shen-singleunderline? (hd (fst V1562))) (hd (fst V1562)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-singleunderline? (V1563)
 (and (symbol? V1563) (shen-sh? (str V1563))))

(defun shen-sh? (V1564)
 (cond ((= "_" V1564) true)
  (true (and (= (pos V1564 0) "_") (shen-sh? (tlstr V1564))))))

(defun shen-doubleunderline? (V1565)
 (and (symbol? V1565) (shen-dh? (str V1565))))

(defun shen-dh? (V1566)
 (cond ((= "=" V1566) true)
  (true (and (= (pos V1566 0) "=") (shen-dh? (tlstr V1566))))))

(defun shen-process-datatype (V1567 V1568)
 (shen-remember-datatype
  (shen-s-prolog (shen-rules->horn-clauses V1567 V1568))))

(defun shen-remember-datatype (V1573)
 (cond
  ((cons? V1573)
   (do (set shen-*datatypes* (adjoin (hd V1573) (value shen-*datatypes*)))
    (do
     (set shen-*alldatatypes* (adjoin (hd V1573) (value shen-*alldatatypes*)))
     (hd V1573))))
  (true (shen-sys-error shen-remember-datatype))))

(defun shen-rules->horn-clauses (V1576 V1577)
 (cond ((= () V1577) ())
  ((and (cons? V1577)
    (and (tuple? (hd V1577)) (= shen-single (fst (hd V1577)))))
   (cons (shen-rule->horn-clause V1576 (snd (hd V1577)))
    (shen-rules->horn-clauses V1576 (tl V1577))))
  ((and (cons? V1577)
    (and (tuple? (hd V1577)) (= shen-double (fst (hd V1577)))))
   (shen-rules->horn-clauses V1576
    (append (shen-double->singles (snd (hd V1577))) (tl V1577))))
  (true (shen-sys-error shen-rules->horn-clauses))))

(defun shen-double->singles (V1578)
 (cons (shen-right-rule V1578) (cons (shen-left-rule V1578) ())))

(defun shen-right-rule (V1579) (@p shen-single V1579))

(defun shen-left-rule (V1580)
 (cond
  ((and (cons? V1580)
    (and (cons? (tl V1580))
     (and (cons? (tl (tl V1580)))
      (and (tuple? (hd (tl (tl V1580))))
       (and (= () (fst (hd (tl (tl V1580)))))
        (= () (tl (tl (tl V1580)))))))))
   (let Q (gensym Qv)
    (let NewConclusion (@p (cons (snd (hd (tl (tl V1580)))) ()) Q)
     (let NewPremises
      (cons
       (@p (map (lambda V1581 (shen-right->left V1581)) (hd (tl V1580))) Q)
       ())
      (@p shen-single
       (cons (hd V1580) (cons NewPremises (cons NewConclusion ()))))))))
  (true (shen-sys-error shen-left-rule))))

(defun shen-right->left (V1586)
 (cond ((and (tuple? V1586) (= () (fst V1586))) (snd V1586))
  (true (interror "syntax error with ==========~%" ()))))

(defun shen-rule->horn-clause (V1587 V1588)
 (cond
  ((and (cons? V1588)
    (and (cons? (tl V1588))
     (and (cons? (tl (tl V1588)))
      (and (tuple? (hd (tl (tl V1588)))) (= () (tl (tl (tl V1588))))))))
   (cons (shen-rule->horn-clause-head V1587 (snd (hd (tl (tl V1588)))))
    (cons :-
     (cons
      (shen-rule->horn-clause-body (hd V1588) (hd (tl V1588))
       (fst (hd (tl (tl V1588)))))
      ()))))
  (true (shen-sys-error shen-rule->horn-clause))))

(defun shen-rule->horn-clause-head (V1589 V1590)
 (cons V1589 (cons (shen-mode-ify V1590) (cons Context_1957 ()))))

(defun shen-mode-ify (V1591)
 (cond
  ((and (cons? V1591)
    (and (cons? (tl V1591))
     (and (= : (hd (tl V1591)))
      (and (cons? (tl (tl V1591))) (= () (tl (tl (tl V1591))))))))
   (cons mode
    (cons
     (cons (hd V1591)
      (cons :
       (cons (cons mode (cons (hd (tl (tl V1591))) (cons + ()))) ())))
     (cons - ()))))
  (true V1591)))

(defun shen-rule->horn-clause-body (V1592 V1593 V1594)
 (let Variables (map (lambda V1595 (shen-extract_vars V1595)) V1594)
  (let Predicates (map (lambda X (gensym shen-cl)) V1594)
   (let SearchLiterals
    (shen-construct-search-literals Predicates Variables Context_1957
     Context1_1957)
    (let SearchClauses
     (shen-construct-search-clauses Predicates V1594 Variables)
     (let SideLiterals (shen-construct-side-literals V1592)
      (let PremissLiterals
       (map (lambda X (shen-construct-premiss-literal X (empty? V1594))) V1593)
       (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen-construct-search-literals (V1600 V1601 V1602 V1603)
 (cond ((and (= () V1600) (= () V1601)) ())
  (true (shen-csl-help V1600 V1601 V1602 V1603))))

(defun shen-csl-help (V1606 V1607 V1608 V1609)
 (cond
  ((and (= () V1606) (= () V1607))
   (cons (cons bind (cons ContextOut_1957 (cons V1608 ()))) ()))
  ((and (cons? V1606) (cons? V1607))
   (cons (cons (hd V1606) (cons V1608 (cons V1609 (hd V1607))))
    (shen-csl-help (tl V1606) (tl V1607) V1609 (gensym Context))))
  (true (shen-sys-error shen-csl-help))))

(defun shen-construct-search-clauses (V1610 V1611 V1612)
 (cond
  ((and (= () V1610) (and (= () V1611) (= () V1612))) shen-skip)
  ((and (cons? V1610) (and (cons? V1611) (cons? V1612)))
   (do (shen-construct-search-clause (hd V1610) (hd V1611) (hd V1612))
    (shen-construct-search-clauses (tl V1610) (tl V1611) (tl V1612))))
  (true (shen-sys-error shen-construct-search-clauses))))

(defun shen-construct-search-clause (V1613 V1614 V1615)
 (shen-s-prolog
  (cons (shen-construct-base-search-clause V1613 V1614 V1615)
   (cons (shen-construct-recursive-search-clause V1613 V1614 V1615) ()))))

(defun shen-construct-base-search-clause (V1616 V1617 V1618)
 (cons
  (cons V1616 (cons (cons (shen-mode-ify V1617) In_1957) (cons In_1957 V1618)))
  (cons :- (cons () ()))))

(defun shen-construct-recursive-search-clause (V1619 V1620 V1621)
 (cons
  (cons V1619
   (cons (cons Assumption_1957 Assumptions_1957)
    (cons (cons Assumption_1957 Out_1957) V1621)))
  (cons :-
   (cons (cons (cons V1619 (cons Assumptions_1957 (cons Out_1957 V1621))) ())
    ()))))

(defun shen-construct-side-literals (V1626)
 (cond ((= () V1626) ())
  ((and (cons? V1626)
    (and (cons? (hd V1626))
     (and (= if (hd (hd V1626)))
      (and (cons? (tl (hd V1626))) (= () (tl (tl (hd V1626))))))))
   (cons (cons when (tl (hd V1626)))
    (shen-construct-side-literals (tl V1626))))
  ((and (cons? V1626)
    (and (cons? (hd V1626))
     (and (= let (hd (hd V1626)))
      (and (cons? (tl (hd V1626)))
       (and (cons? (tl (tl (hd V1626))))
        (= () (tl (tl (tl (hd V1626))))))))))
   (cons (cons is (tl (hd V1626))) (shen-construct-side-literals (tl V1626))))
  ((cons? V1626) (shen-construct-side-literals (tl V1626)))
  (true (shen-sys-error shen-construct-side-literals))))

(defun shen-construct-premiss-literal (V1631 V1632)
 (cond
  ((tuple? V1631)
   (cons shen-t*
    (cons (shen-recursive_cons_form (snd V1631))
     (cons (shen-construct-context V1632 (fst V1631)) ()))))
  ((= ! V1631) (cons cut (cons Throwcontrol ())))
  (true (shen-sys-error shen-construct-premiss-literal))))

(defun shen-construct-context (V1633 V1634)
 (cond ((and (= true V1633) (= () V1634)) Context_1957)
  ((and (= false V1633) (= () V1634)) ContextOut_1957)
  ((cons? V1634)
   (cons cons
    (cons (shen-recursive_cons_form (hd V1634))
     (cons (shen-construct-context V1633 (tl V1634)) ()))))
  (true (shen-sys-error shen-construct-context))))

(defun shen-recursive_cons_form (V1635)
 (cond
  ((cons? V1635)
   (cons cons
    (cons (shen-recursive_cons_form (hd V1635))
     (cons (shen-recursive_cons_form (tl V1635)) ()))))
  (true V1635)))

(defun preclude (V1636)
 (let FilterDatatypes
  (set shen-*datatypes* (difference (value shen-*datatypes*) V1636))
  (value shen-*datatypes*)))

(defun include (V1637)
 (let ValidTypes (intersection V1637 (value shen-*alldatatypes*))
  (let NewDatatypes
   (set shen-*datatypes* (union ValidTypes (value shen-*datatypes*)))
   (value shen-*datatypes*))))

(defun preclude-all-but (V1638)
 (preclude (difference (value shen-*alldatatypes*) V1638)))

(defun include-all-but (V1639)
 (include (difference (value shen-*alldatatypes*) V1639)))

(defun shen-synonyms-help (V1644)
 (cond ((= () V1644) synonyms)
  ((and (cons? V1644) (cons? (tl V1644)))
   (do (shen-pushnew (cons (hd V1644) (hd (tl V1644))) shen-*synonyms*)
    (shen-synonyms-help (tl (tl V1644)))))
  (true (interror "odd number of synonyms~%" (@p () ())))))

(defun shen-pushnew (V1645 V1646)
 (if (element? V1645 (value V1646)) (value V1646)
  (set V1646 (cons V1645 (value V1646)))))

