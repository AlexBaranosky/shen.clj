
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun shen-datatype-error (V5186)
 (interror "datatype syntax error here:~%~% ~A~%"
  (@p (shen-next-50 50 V5186) ())))

(defun shen-<datatype-rules> (V5187)
 (let Result
  (let Parse_<datatype-rule> (shen-<datatype-rule> V5187)
   (if (not (= (fail) Parse_<datatype-rule>))
    (let Parse_<datatype-rules> (shen-<datatype-rules> Parse_<datatype-rule>)
     (if (not (= (fail) Parse_<datatype-rules>))
      (shen-reassemble (fst Parse_<datatype-rules>)
       (cons (snd Parse_<datatype-rule>) (snd Parse_<datatype-rules>)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V5187)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<datatype-rule> (V5188)
 (let Result
  (let Parse_<side-conditions> (shen-<side-conditions> V5188)
   (if (not (= (fail) Parse_<side-conditions>))
    (let Parse_<premises> (shen-<premises> Parse_<side-conditions>)
     (if (not (= (fail) Parse_<premises>))
      (let Parse_<singleunderline> (shen-<singleunderline> Parse_<premises>)
       (if (not (= (fail) Parse_<singleunderline>))
        (let Parse_<conclusion> (shen-<conclusion> Parse_<singleunderline>)
         (if (not (= (fail) Parse_<conclusion>))
          (shen-reassemble (fst Parse_<conclusion>)
           (@p shen-single
            (cons (snd Parse_<side-conditions>)
             (cons (snd Parse_<premises>)
              (cons (snd Parse_<conclusion>) ())))))
          (fail)))
        (fail)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<side-conditions> (shen-<side-conditions> V5188)
     (if (not (= (fail) Parse_<side-conditions>))
      (let Parse_<premises> (shen-<premises> Parse_<side-conditions>)
       (if (not (= (fail) Parse_<premises>))
        (let Parse_<doubleunderline> (shen-<doubleunderline> Parse_<premises>)
         (if (not (= (fail) Parse_<doubleunderline>))
          (let Parse_<conclusion> (shen-<conclusion> Parse_<doubleunderline>)
           (if (not (= (fail) Parse_<conclusion>))
            (shen-reassemble (fst Parse_<conclusion>)
             (@p shen-double
              (cons (snd Parse_<side-conditions>)
               (cons (snd Parse_<premises>)
                (cons (snd Parse_<conclusion>) ())))))
            (fail)))
          (fail)))
        (fail)))
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<side-conditions> (V5189)
 (let Result
  (let Parse_<side-condition> (shen-<side-condition> V5189)
   (if (not (= (fail) Parse_<side-condition>))
    (let Parse_<side-conditions>
     (shen-<side-conditions> Parse_<side-condition>)
     (if (not (= (fail) Parse_<side-conditions>))
      (shen-reassemble (fst Parse_<side-conditions>)
       (cons (snd Parse_<side-condition>) (snd Parse_<side-conditions>)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V5189)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<side-condition> (V5190)
 (let Result
  (if (and (cons? (fst V5190)) (= if (hd (fst V5190))))
   (let Parse_<expr>
    (shen-<expr> (shen-reassemble (tl (fst V5190)) (snd V5190)))
    (if (not (= (fail) Parse_<expr>))
     (shen-reassemble (fst Parse_<expr>)
      (cons if (cons (snd Parse_<expr>) ())))
     (fail)))
   (fail))
  (if (= Result (fail))
   (let Result
    (if (and (cons? (fst V5190)) (= let (hd (fst V5190))))
     (let Parse_<variable?>
      (shen-<variable?> (shen-reassemble (tl (fst V5190)) (snd V5190)))
      (if (not (= (fail) Parse_<variable?>))
       (let Parse_<expr> (shen-<expr> Parse_<variable?>)
        (if (not (= (fail) Parse_<expr>))
         (shen-reassemble (fst Parse_<expr>)
          (cons let
           (cons (snd Parse_<variable?>) (cons (snd Parse_<expr>) ()))))
         (fail)))
       (fail)))
     (fail))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<variable?> (V5191)
 (let Result
  (if (cons? (fst V5191))
   (shen-reassemble (fst (shen-reassemble (tl (fst V5191)) (snd V5191)))
    (if (not (variable? (hd (fst V5191)))) (fail) (hd (fst V5191))))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<expr> (V5192)
 (let Result
  (if (cons? (fst V5192))
   (shen-reassemble (fst (shen-reassemble (tl (fst V5192)) (snd V5192)))
    (if
     (or (element? (hd (fst V5192)) (cons >> (cons ; ())))
      (or (shen-singleunderline? (hd (fst V5192)))
       (shen-doubleunderline? (hd (fst V5192)))))
     (fail) (shen-remove-bar (hd (fst V5192)))))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-remove-bar (V5193)
 (cond
  ((and (cons? V5193)
    (and (cons? (tl V5193))
     (and (cons? (tl (tl V5193)))
      (and (= () (tl (tl (tl V5193)))) (= (hd (tl V5193)) bar!)))))
   (cons (hd V5193) (hd (tl (tl V5193)))))
  ((cons? V5193)
   (cons (shen-remove-bar (hd V5193)) (shen-remove-bar (tl V5193))))
  (true V5193)))

(defun shen-<premises> (V5194)
 (let Result
  (let Parse_<premise> (shen-<premise> V5194)
   (if (not (= (fail) Parse_<premise>))
    (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<premise>)
     (if (not (= (fail) Parse_<semicolon-symbol>))
      (let Parse_<premises> (shen-<premises> Parse_<semicolon-symbol>)
       (if (not (= (fail) Parse_<premises>))
        (shen-reassemble (fst Parse_<premises>)
         (cons (snd Parse_<premise>) (snd Parse_<premises>)))
        (fail)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V5194)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<semicolon-symbol> (V5195)
 (let Result
  (if (cons? (fst V5195))
   (shen-reassemble (fst (shen-reassemble (tl (fst V5195)) (snd V5195)))
    (if (= (hd (fst V5195)) ;) shen-skip (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<premise> (V5196)
 (let Result
  (if (and (cons? (fst V5196)) (= ! (hd (fst V5196))))
   (shen-reassemble (fst (shen-reassemble (tl (fst V5196)) (snd V5196))) !)
   (fail))
  (if (= Result (fail))
   (let Result
    (let Parse_<formulae> (shen-<formulae> V5196)
     (if (not (= (fail) Parse_<formulae>))
      (if
       (and (cons? (fst Parse_<formulae>))
        (= >> (hd (fst Parse_<formulae>))))
       (let Parse_<formula>
        (shen-<formula>
         (shen-reassemble (tl (fst Parse_<formulae>)) (snd Parse_<formulae>)))
        (if (not (= (fail) Parse_<formula>))
         (shen-reassemble (fst Parse_<formula>)
          (@p (snd Parse_<formulae>) (snd Parse_<formula>)))
         (fail)))
       (fail))
      (fail)))
    (if (= Result (fail))
     (let Result
      (let Parse_<formula> (shen-<formula> V5196)
       (if (not (= (fail) Parse_<formula>))
        (shen-reassemble (fst Parse_<formula>) (@p () (snd Parse_<formula>)))
        (fail)))
      (if (= Result (fail)) (fail) Result))
     Result))
   Result)))

(defun shen-<conclusion> (V5197)
 (let Result
  (let Parse_<formulae> (shen-<formulae> V5197)
   (if (not (= (fail) Parse_<formulae>))
    (if
     (and (cons? (fst Parse_<formulae>)) (= >> (hd (fst Parse_<formulae>))))
     (let Parse_<formula>
      (shen-<formula>
       (shen-reassemble (tl (fst Parse_<formulae>)) (snd Parse_<formulae>)))
      (if (not (= (fail) Parse_<formula>))
       (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<formula>)
        (if (not (= (fail) Parse_<semicolon-symbol>))
         (shen-reassemble (fst Parse_<semicolon-symbol>)
          (@p (snd Parse_<formulae>) (snd Parse_<formula>)))
         (fail)))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<formula> (shen-<formula> V5197)
     (if (not (= (fail) Parse_<formula>))
      (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<formula>)
       (if (not (= (fail) Parse_<semicolon-symbol>))
        (shen-reassemble (fst Parse_<semicolon-symbol>)
         (@p () (snd Parse_<formula>)))
        (fail)))
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<formulae> (V5198)
 (let Result
  (let Parse_<formula> (shen-<formula> V5198)
   (if (not (= (fail) Parse_<formula>))
    (if
     (and (cons? (fst Parse_<formula>))
      (= shen- (hd (fst Parse_<formula>))))
     (let Parse_<formulae>
      (shen-<formulae>
       (shen-reassemble (tl (fst Parse_<formula>)) (snd Parse_<formula>)))
      (if (not (= (fail) Parse_<formulae>))
       (shen-reassemble (fst Parse_<formulae>)
        (cons (snd Parse_<formula>) (snd Parse_<formulae>)))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<formula> (shen-<formula> V5198)
     (if (not (= (fail) Parse_<formula>))
      (shen-reassemble (fst Parse_<formula>) (cons (snd Parse_<formula>) ()))
      (fail)))
    (if (= Result (fail))
     (let Result
      (let Parse_<e> (<e> V5198)
       (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
        (fail)))
      (if (= Result (fail)) (fail) Result))
     Result))
   Result)))

(defun shen-<formula> (V5199)
 (let Result
  (let Parse_<expr> (shen-<expr> V5199)
   (if (not (= (fail) Parse_<expr>))
    (if (and (cons? (fst Parse_<expr>)) (= : (hd (fst Parse_<expr>))))
     (let Parse_<type>
      (shen-<type>
       (shen-reassemble (tl (fst Parse_<expr>)) (snd Parse_<expr>)))
      (if (not (= (fail) Parse_<type>))
       (shen-reassemble (fst Parse_<type>)
        (cons (shen-curry (snd Parse_<expr>))
         (cons : (cons (shen-normalise-type (snd Parse_<type>)) ()))))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<expr> (shen-<expr> V5199)
     (if (not (= (fail) Parse_<expr>))
      (shen-reassemble (fst Parse_<expr>) (snd Parse_<expr>)) (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<colonsymbol> (V5200)
 (let Result
  (if (cons? (fst V5200))
   (shen-reassemble (fst (shen-reassemble (tl (fst V5200)) (snd V5200)))
    (if (= (hd (fst V5200)) ;) (hd (fst V5200)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<type> (V5201)
 (let Result
  (let Parse_<expr> (shen-<expr> V5201)
   (if (not (= (fail) Parse_<expr>))
    (shen-reassemble (fst Parse_<expr>) (shen-curry-type (snd Parse_<expr>)))
    (fail)))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<doubleunderline> (V5202)
 (let Result
  (if (cons? (fst V5202))
   (shen-reassemble (fst (shen-reassemble (tl (fst V5202)) (snd V5202)))
    (if (shen-doubleunderline? (hd (fst V5202))) (hd (fst V5202)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<singleunderline> (V5203)
 (let Result
  (if (cons? (fst V5203))
   (shen-reassemble (fst (shen-reassemble (tl (fst V5203)) (snd V5203)))
    (if (shen-singleunderline? (hd (fst V5203))) (hd (fst V5203)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-singleunderline? (V5204)
 (and (symbol? V5204) (shen-sh? (str V5204))))

(defun shen-sh? (V5205)
 (cond ((= "_" V5205) true)
  (true (and (= (pos V5205 0) "_") (shen-sh? (tlstr V5205))))))

(defun shen-doubleunderline? (V5206)
 (and (symbol? V5206) (shen-dh? (str V5206))))

(defun shen-dh? (V5207)
 (cond ((= "=" V5207) true)
  (true (and (= (pos V5207 0) "=") (shen-dh? (tlstr V5207))))))

(defun shen-process-datatype (V5208 V5209)
 (shen-remember-datatype
  (shen-s-prolog (shen-rules->horn-clauses V5208 V5209))))

(defun shen-remember-datatype (V5214)
 (cond
  ((cons? V5214)
   (do (set shen-*datatypes* (adjoin (hd V5214) (value shen-*datatypes*)))
    (do
     (set shen-*alldatatypes* (adjoin (hd V5214) (value shen-*alldatatypes*)))
     (hd V5214))))
  (true (shen-sys-error shen-remember-datatype))))

(defun shen-rules->horn-clauses (V5217 V5218)
 (cond ((= () V5218) ())
  ((and (cons? V5218)
    (and (tuple? (hd V5218)) (= shen-single (fst (hd V5218)))))
   (cons (shen-rule->horn-clause V5217 (snd (hd V5218)))
    (shen-rules->horn-clauses V5217 (tl V5218))))
  ((and (cons? V5218)
    (and (tuple? (hd V5218)) (= shen-double (fst (hd V5218)))))
   (shen-rules->horn-clauses V5217
    (append (shen-double->singles (snd (hd V5218))) (tl V5218))))
  (true (shen-sys-error shen-rules->horn-clauses))))

(defun shen-double->singles (V5219)
 (cons (shen-right-rule V5219) (cons (shen-left-rule V5219) ())))

(defun shen-right-rule (V5220) (@p shen-single V5220))

(defun shen-left-rule (V5221)
 (cond
  ((and (cons? V5221)
    (and (cons? (tl V5221))
     (and (cons? (tl (tl V5221)))
      (and (tuple? (hd (tl (tl V5221))))
       (and (= () (fst (hd (tl (tl V5221)))))
        (= () (tl (tl (tl V5221)))))))))
   (let Q (gensym Qv)
    (let NewConclusion (@p (cons (snd (hd (tl (tl V5221)))) ()) Q)
     (let NewPremises
      (cons
       (@p (map (lambda V5222 (shen-right->left V5222)) (hd (tl V5221))) Q)
       ())
      (@p shen-single
       (cons (hd V5221) (cons NewPremises (cons NewConclusion ()))))))))
  (true (shen-sys-error shen-left-rule))))

(defun shen-right->left (V5227)
 (cond ((and (tuple? V5227) (= () (fst V5227))) (snd V5227))
  (true (interror "syntax error with ==========~%" ()))))

(defun shen-rule->horn-clause (V5228 V5229)
 (cond
  ((and (cons? V5229)
    (and (cons? (tl V5229))
     (and (cons? (tl (tl V5229)))
      (and (tuple? (hd (tl (tl V5229)))) (= () (tl (tl (tl V5229))))))))
   (cons (shen-rule->horn-clause-head V5228 (snd (hd (tl (tl V5229)))))
    (cons :-
     (cons
      (shen-rule->horn-clause-body (hd V5229) (hd (tl V5229))
       (fst (hd (tl (tl V5229)))))
      ()))))
  (true (shen-sys-error shen-rule->horn-clause))))

(defun shen-rule->horn-clause-head (V5230 V5231)
 (cons V5230 (cons (shen-mode-ify V5231) (cons Context_1957 ()))))

(defun shen-mode-ify (V5232)
 (cond
  ((and (cons? V5232)
    (and (cons? (tl V5232))
     (and (= : (hd (tl V5232)))
      (and (cons? (tl (tl V5232))) (= () (tl (tl (tl V5232))))))))
   (cons mode
    (cons
     (cons (hd V5232)
      (cons :
       (cons (cons mode (cons (hd (tl (tl V5232))) (cons + ()))) ())))
     (cons - ()))))
  (true V5232)))

(defun shen-rule->horn-clause-body (V5233 V5234 V5235)
 (let Variables (map (lambda V5236 (shen-extract_vars V5236)) V5235)
  (let Predicates (map (lambda X (gensym shen-cl)) V5235)
   (let SearchLiterals
    (shen-construct-search-literals Predicates Variables Context_1957
     Context1_1957)
    (let SearchClauses
     (shen-construct-search-clauses Predicates V5235 Variables)
     (let SideLiterals (shen-construct-side-literals V5233)
      (let PremissLiterals
       (map (lambda X (shen-construct-premiss-literal X (empty? V5235))) V5234)
       (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen-construct-search-literals (V5241 V5242 V5243 V5244)
 (cond ((and (= () V5241) (= () V5242)) ())
  (true (shen-csl-help V5241 V5242 V5243 V5244))))

(defun shen-csl-help (V5247 V5248 V5249 V5250)
 (cond
  ((and (= () V5247) (= () V5248))
   (cons (cons bind (cons ContextOut_1957 (cons V5249 ()))) ()))
  ((and (cons? V5247) (cons? V5248))
   (cons (cons (hd V5247) (cons V5249 (cons V5250 (hd V5248))))
    (shen-csl-help (tl V5247) (tl V5248) V5250 (gensym Context))))
  (true (shen-sys-error shen-csl-help))))

(defun shen-construct-search-clauses (V5251 V5252 V5253)
 (cond
  ((and (= () V5251) (and (= () V5252) (= () V5253))) shen-skip)
  ((and (cons? V5251) (and (cons? V5252) (cons? V5253)))
   (do (shen-construct-search-clause (hd V5251) (hd V5252) (hd V5253))
    (shen-construct-search-clauses (tl V5251) (tl V5252) (tl V5253))))
  (true (shen-sys-error shen-construct-search-clauses))))

(defun shen-construct-search-clause (V5254 V5255 V5256)
 (shen-s-prolog
  (cons (shen-construct-base-search-clause V5254 V5255 V5256)
   (cons (shen-construct-recursive-search-clause V5254 V5255 V5256) ()))))

(defun shen-construct-base-search-clause (V5257 V5258 V5259)
 (cons
  (cons V5257 (cons (cons (shen-mode-ify V5258) In_1957) (cons In_1957 V5259)))
  (cons :- (cons () ()))))

(defun shen-construct-recursive-search-clause (V5260 V5261 V5262)
 (cons
  (cons V5260
   (cons (cons Assumption_1957 Assumptions_1957)
    (cons (cons Assumption_1957 Out_1957) V5262)))
  (cons :-
   (cons (cons (cons V5260 (cons Assumptions_1957 (cons Out_1957 V5262))) ())
    ()))))

(defun shen-construct-side-literals (V5267)
 (cond ((= () V5267) ())
  ((and (cons? V5267)
    (and (cons? (hd V5267))
     (and (= if (hd (hd V5267)))
      (and (cons? (tl (hd V5267))) (= () (tl (tl (hd V5267))))))))
   (cons (cons when (tl (hd V5267)))
    (shen-construct-side-literals (tl V5267))))
  ((and (cons? V5267)
    (and (cons? (hd V5267))
     (and (= let (hd (hd V5267)))
      (and (cons? (tl (hd V5267)))
       (and (cons? (tl (tl (hd V5267))))
        (= () (tl (tl (tl (hd V5267))))))))))
   (cons (cons is (tl (hd V5267))) (shen-construct-side-literals (tl V5267))))
  ((cons? V5267) (shen-construct-side-literals (tl V5267)))
  (true (shen-sys-error shen-construct-side-literals))))

(defun shen-construct-premiss-literal (V5272 V5273)
 (cond
  ((tuple? V5272)
   (cons shen-t*
    (cons (shen-recursive_cons_form (snd V5272))
     (cons (shen-construct-context V5273 (fst V5272)) ()))))
  ((= ! V5272) (cons cut (cons Throwcontrol ())))
  (true (shen-sys-error shen-construct-premiss-literal))))

(defun shen-construct-context (V5274 V5275)
 (cond ((and (= true V5274) (= () V5275)) Context_1957)
  ((and (= false V5274) (= () V5275)) ContextOut_1957)
  ((cons? V5275)
   (cons cons
    (cons (shen-recursive_cons_form (hd V5275))
     (cons (shen-construct-context V5274 (tl V5275)) ()))))
  (true (shen-sys-error shen-construct-context))))

(defun shen-recursive_cons_form (V5276)
 (cond
  ((cons? V5276)
   (cons cons
    (cons (shen-recursive_cons_form (hd V5276))
     (cons (shen-recursive_cons_form (tl V5276)) ()))))
  (true V5276)))

(defun preclude (V5277)
 (let FilterDatatypes
  (set shen-*datatypes* (difference (value shen-*datatypes*) V5277))
  (value shen-*datatypes*)))

(defun include (V5278)
 (let ValidTypes (intersection V5278 (value shen-*alldatatypes*))
  (let NewDatatypes
   (set shen-*datatypes* (union ValidTypes (value shen-*datatypes*)))
   (value shen-*datatypes*))))

(defun preclude-all-but (V5279)
 (preclude (difference (value shen-*alldatatypes*) V5279)))

(defun include-all-but (V5280)
 (include (difference (value shen-*alldatatypes*) V5280)))

(defun shen-synonyms-help (V5285)
 (cond ((= () V5285) synonyms)
  ((and (cons? V5285) (cons? (tl V5285)))
   (do (shen-pushnew (cons (hd V5285) (hd (tl V5285))) shen-*synonyms*)
    (shen-synonyms-help (tl (tl V5285)))))
  (true (interror "odd number of synonyms~%" (@p () ())))))

(defun shen-pushnew (V5286 V5287)
 (if (element? V5286 (value V5287)) (value V5287)
  (set V5287 (cons V5286 (value V5287)))))

