
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun shen-yacc (V3955)
 (cond
  ((and (cons? V3955) (and (= defcc (hd V3955)) (cons? (tl V3955))))
   (shen-yacc->shen (hd (tl V3955)) (tl (tl V3955))))
  (true (shen-sys-error shen-yacc))))

(defun shen-yacc->shen (V3956 V3957)
 (cons define
  (cons V3956
   (shen-yacc_cases
    (map (lambda V3958 (shen-cc_body V3958))
     (shen-split_cc_rules V3957 ()))))))

(defun shen-yacc_cases (V3959)
 (append (mapcan (lambda Case (cons Stream (cons <- (cons Case ())))) V3959)
  (cons _ (cons -> (cons (cons fail ()) ())))))

(defun shen-first_n (V3964 V3965)
 (cond ((= 0 V3964) ()) ((= () V3965) ())
  ((cons? V3965) (cons (hd V3965) (shen-first_n (- V3964 1) (tl V3965))))
  (true (shen-sys-error shen-first_n))))

(defun shen-split_cc_rules (V3966 V3967)
 (cond ((and (= () V3966) (= () V3967)) ())
  ((= () V3966) (cons (shen-split_cc_rule (reverse V3967) ()) ()))
  ((and (cons? V3966) (= ; (hd V3966)))
   (cons (shen-split_cc_rule (reverse V3967) ())
    (shen-split_cc_rules (tl V3966) ())))
  ((cons? V3966) (shen-split_cc_rules (tl V3966) (cons (hd V3966) V3967)))
  (true (shen-sys-error shen-split_cc_rules))))

(defun shen-split_cc_rule (V3968 V3969)
 (cond
  ((and (cons? V3968)
    (and (= := (hd V3968))
     (and (cons? (tl V3968)) (= () (tl (tl V3968))))))
   (cons (reverse V3969) (tl V3968)))
  ((and (cons? V3968) (= := (hd V3968)))
   (cons (reverse V3969) (cons (shen-cons_form (tl V3968)) ())))
  ((= () V3968)
   (do (intoutput "warning: " ())
    (do (map (lambda X (intoutput "~A " (@p X ()))) (reverse V3969))
     (do (intoutput "has no semantics.~%" ())
      (shen-split_cc_rule
       (cons := (cons (shen-default_semantics (reverse V3969)) ())) V3969)))))
  ((cons? V3968) (shen-split_cc_rule (tl V3968) (cons (hd V3968) V3969)))
  (true (shen-sys-error shen-split_cc_rule))))

(defun shen-default_semantics (V3970)
 (cond ((= () V3970) ())
  ((and (cons? V3970) (shen-grammar_symbol? (hd V3970)))
   (let PS (cons snd (cons (concat Parse_ (hd V3970)) ()))
    (if (empty? (tl V3970)) PS
     (cons append (cons PS (cons (shen-default_semantics (tl V3970)) ()))))))
  ((cons? V3970)
   (cons cons
    (cons (hd V3970) (cons (shen-default_semantics (tl V3970)) ()))))
  (true (shen-sys-error shen-default_semantics))))

(defun shen-cc_body (V3971)
 (cond
  ((and (cons? V3971) (and (cons? (tl V3971)) (= () (tl (tl V3971)))))
   (shen-syntax (hd V3971) Stream (hd (tl V3971))))
  (true (shen-sys-error shen-cc_body))))

(defun shen-syntax (V3972 V3973 V3974)
 (cond
  ((= () V3972)
   (cons shen-reassemble
    (cons (cons fst (cons V3973 ())) (cons (shen-semantics V3974) ()))))
  ((cons? V3972)
   (if (shen-grammar_symbol? (hd V3972))
    (shen-recursive_descent V3972 V3973 V3974)
    (if (shen-terminal? (hd V3972)) (shen-check_stream V3972 V3973 V3974)
     (if (shen-jump_stream? (hd V3972)) (shen-jump_stream V3972 V3973 V3974)
      (if (shen-list_stream? (hd V3972))
       (shen-list_stream (shen-decons (hd V3972)) (tl V3972) V3973 V3974)
       (interror "~A is not legal syntax~%" (@p (hd V3972) ())))))))
  (true (shen-sys-error shen-syntax))))

(defun shen-list_stream? (V3983) (cond ((cons? V3983) true) (true false)))

(defun shen-decons (V3984)
 (cond
  ((and (cons? V3984)
    (and (= cons (hd V3984))
     (and (cons? (tl V3984))
      (and (cons? (tl (tl V3984))) (= () (tl (tl (tl V3984))))))))
   (cons (hd (tl V3984)) (shen-decons (hd (tl (tl V3984))))))
  (true V3984)))

(defun shen-list_stream (V3985 V3986 V3987 V3988)
 (let Test
  (cons and
   (cons (cons cons? (cons (cons fst (cons V3987 ())) ()))
    (cons
     (cons cons? (cons (cons hd (cons (cons fst (cons V3987 ())) ())) ()))
     ())))
  (let Action
   (cons shen-snd-or-fail
    (cons
     (shen-syntax V3985
      (cons shen-reassemble
       (cons (cons hd (cons (cons fst (cons V3987 ())) ()))
        (cons (cons snd (cons V3987 ())) ())))
      (cons shen-leave!
       (cons
        (shen-syntax V3986
         (cons shen-reassemble
          (cons (cons tl (cons (cons fst (cons V3987 ())) ()))
           (cons (cons snd (cons V3987 ())) ())))
         V3988)
        ())))
     ()))
   (let Else (cons fail ())
    (cons if (cons Test (cons Action (cons Else ()))))))))

(defun shen-snd-or-fail (V3995)
 (cond ((tuple? V3995) (snd V3995)) (true (fail))))

(defun shen-grammar_symbol? (V3996)
 (and (symbol? V3996)
  (let Cs (explode V3996)
   (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen-recursive_descent (V3997 V3998 V3999)
 (cond
  ((cons? V3997)
   (let Test (cons (hd V3997) (cons V3998 ()))
    (let Action (shen-syntax (tl V3997) (concat Parse_ (hd V3997)) V3999)
     (let Else (cons fail ())
      (cons let
       (cons (concat Parse_ (hd V3997))
        (cons Test
         (cons
          (cons if
           (cons
            (cons not
             (cons
              (cons =
               (cons (cons fail ()) (cons (concat Parse_ (hd V3997)) ())))
              ()))
            (cons Action (cons Else ()))))
          ()))))))))
  (true (shen-sys-error shen-recursive_descent))))

(defun shen-terminal? (V4008)
 (cond ((cons? V4008) false) ((= -*- V4008) false) (true true)))

(defun shen-jump_stream? (V4013) (cond ((= -*- V4013) true) (true false)))

(defun shen-check_stream (V4014 V4015 V4016)
 (cond
  ((cons? V4014)
   (let Test
    (cons and
     (cons (cons cons? (cons (cons fst (cons V4015 ())) ()))
      (cons
       (cons =
        (cons (hd V4014)
         (cons (cons hd (cons (cons fst (cons V4015 ())) ())) ())))
       ())))
    (let Action
     (shen-syntax (tl V4014)
      (cons shen-reassemble
       (cons (cons tl (cons (cons fst (cons V4015 ())) ()))
        (cons (cons snd (cons V4015 ())) ())))
      V4016)
     (let Else (cons fail ())
      (cons if (cons Test (cons Action (cons Else ()))))))))
  (true (shen-sys-error shen-check_stream))))

(defun shen-reassemble (V4018 V4019)
 (cond ((= V4019 (fail)) V4019) (true (@p V4018 V4019))))

(defun shen-jump_stream (V4020 V4021 V4022)
 (cond
  ((cons? V4020)
   (let Test (cons cons? (cons (cons fst (cons V4021 ())) ()))
    (let Action
     (shen-syntax (tl V4020)
      (cons shen-reassemble
       (cons (cons tl (cons (cons fst (cons V4021 ())) ()))
        (cons (cons snd (cons V4021 ())) ())))
      V4022)
     (let Else (cons fail ())
      (cons if (cons Test (cons Action (cons Else ()))))))))
  (true (shen-sys-error shen-jump_stream))))

(defun shen-semantics (V4023)
 (cond
  ((and (cons? V4023)
    (and (= shen-leave! (hd V4023))
     (and (cons? (tl V4023)) (= () (tl (tl V4023))))))
   (hd (tl V4023)))
  ((= () V4023) ())
  ((shen-grammar_symbol? V4023) (cons snd (cons (concat Parse_ V4023) ())))
  ((= -o- V4023) (cons snd (cons Stream ())))
  ((= -*- V4023) (cons hd (cons (cons fst (cons Stream ())) ())))
  ((= -s- V4023) (cons fst (cons Stream ())))
  ((cons? V4023) (map (lambda V4024 (shen-semantics V4024)) V4023))
  (true V4023)))

(defun fail () fail!)

