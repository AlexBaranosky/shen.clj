
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun print (V4715)
 (do
  (pr (shen-ms-h (cons "~" (cons "S" ())) (@p V4715 shen-skip)) (stinput 0))
  V4715))

(defun format (V4716 V4717 V4718)
 (cond ((= true V4716) (intoutput V4717 (@p V4718 ())))
  ((= false V4716) (intmake-string V4717 (@p V4718 ())))
  (true (pr (shen-ms-h (explode V4717) V4718) V4716))))

(defun intoutput (V4723 V4724)
 (cond ((= (value shen-*hush*) "Shen hushed") "Shen hushed")
  ((= "Shen unhushed" V4723) "Shen unhushed")
  (true (pr (shen-ms-h (shen-explode-string V4723) V4724) (stinput 0)))))

(defun interror (V4725 V4726)
 (simple-error (shen-ms-h (shen-explode-string V4725) V4726)))

(defun intmake-string (V4727 V4728)
 (shen-ms-h (shen-explode-string V4727) V4728))

(defun shen-ms-h (V4731 V4732)
 (cond ((= () V4731) "")
  ((and (cons? V4731)
    (and (= "~" (hd V4731))
     (and (cons? (tl V4731)) (= "%" (hd (tl V4731))))))
   (cn (n->string 10) (shen-ms-h (tl (tl V4731)) V4732)))
  ((and (cons? V4731)
    (and (= "~" (hd V4731))
     (and (cons? (tl V4731))
      (and (tuple? V4732)
       (element? (hd (tl V4731)) (cons "A" (cons "S" (cons "R" ()))))))))
   (cn (shen-ob->str (hd (tl V4731)) (fst V4732))
    (shen-ms-h (tl (tl V4731)) (snd V4732))))
  ((cons? V4731) (cn (hd V4731) (shen-ms-h (tl V4731) V4732)))
  (true (shen-sys-error shen-ms-h))))

(defun shen-ob->str (V4735 V4736)
 (cond ((= () V4736) (if (= V4735 "R") "()" "[]"))
  ((= V4736 (vector 0)) "<>")
  ((cons? V4736)
   (shen-cn-all
    (append (if (= V4735 "R") (cons "(" ()) (cons "[" ()))
     (append (cons (shen-ob->str V4735 (hd V4736)) ())
      (append
       (shen-xmapcan (value *maximum-print-sequence-size*)
        (lambda Z (cons " " (cons (shen-ob->str V4735 Z) ()))) (tl V4736))
       (if (= V4735 "R") (cons ")" ()) (cons "]" ())))))))
  ((vector? V4736)
   (let L (shen-vector->list V4736 1)
    (let E
     (tlstr
      (shen-cn-all
       (shen-xmapcan (- (value *maximum-print-sequence-size*) 1)
        (lambda Z
         (cons " " (cons (shen-ob->str V4735 (shen-blank-fail Z)) ())))
        L)))
     (let V (cn "<" (cn E ">")) V))))
  ((and (not (string? V4736)) (absvector? V4736))
   (trap-error (shen-ob->str "A" ((<-address V4736 0) V4736))
    (lambda Ignore
     (let L (shen-vector->list V4736 0)
      (let E
       (tlstr
        (shen-cn-all
         (shen-xmapcan (- (value *maximum-print-sequence-size*) 1)
          (lambda Z (cons " " (cons (shen-ob->str V4735 Z) ()))) L)))
       (let V (cn "<" (cn E ">")) V))))))
  ((= shen-vector-failure-object V4736) "...")
  (true (if (and (= V4735 "A") (string? V4736)) V4736 (str V4736)))))

(defun shen-blank-fail (V4737)
 (cond ((= V4737 (fail)) shen-vector-failure-object) (true V4737)))

(defun shen-tuple (V4738)
 (intmake-string "(@p ~S ~S)" (@p (fst V4738) (@p (snd V4738) ()))))

(defun shen-cn-all (V4739)
 (cond ((= () V4739) "")
  ((cons? V4739) (cn (hd V4739) (shen-cn-all (tl V4739))))
  (true (shen-sys-error shen-cn-all))))

(defun shen-xmapcan (V4752 V4753 V4754)
 (cond ((= () V4754) ()) ((= 0 V4752) (cons "... etc" ()))
  ((cons? V4754)
   (append (V4753 (hd V4754)) (shen-xmapcan (- V4752 1) V4753 (tl V4754))))
  (true (cons " |" (V4753 V4754)))))

(defun shen-vector->list (V4755 V4756) (shen-vector->listh V4755 V4756 ()))

(defun shen-vector->listh (V4757 V4758 V4759)
 (let Y (trap-error (<-address V4757 V4758) (lambda E shen-out-of-range))
  (if (= Y shen-out-of-range) (reverse V4759)
   (shen-vector->listh V4757 (+ V4758 1) (cons Y V4759)))))

