
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun thaw (V567) (V567))

(defun eval (V629)
 (let Macroexpand (shen-walk (lambda V630 (macroexpand V630)) V629)
  (if (shen-packaged? Macroexpand)
   (map (lambda V631 (eval-without-macros V631))
    (shen-package-contents Macroexpand))
   (eval-without-macros Macroexpand))))

(defun eval-without-macros (V632)
 (eval-kl (shen-elim-define (shen-proc-input+ V632))))

(defun shen-proc-input+ (V633)
 (cond
  ((and (cons? V633)
    (and (= input+ (hd V633))
     (and (cons? (tl V633))
      (and (cons? (tl (tl V633))) (= () (tl (tl (tl V633))))))))
   (cons input+
    (cons (hd (tl V633)) (cons (shen-rcons_form (hd (tl (tl V633)))) ()))))
  ((cons? V633) (map (lambda V634 (shen-proc-input+ V634)) V633)) (true V633)))

(defun shen-elim-define (V635)
 (cond
  ((and (cons? V635) (and (= define (hd V635)) (cons? (tl V635))))
   (shen-shen->kl (hd (tl V635)) (tl (tl V635))))
  ((cons? V635) (map (lambda V636 (shen-elim-define V636)) V635)) (true V635)))

(defun shen-packaged? (V643)
 (cond
  ((and (cons? V643)
    (and (= package (hd V643))
     (and (cons? (tl V643)) (cons? (tl (tl V643))))))
   true)
  (true false)))

(defun external (V644)
 (trap-error (get V644 shen-external-symbols (value shen-*property-vector*))
  (lambda E (interror "package ~A has not been used.~" ()))))

(defun shen-package-contents (V647)
 (cond
  ((and (cons? V647)
    (and (= package (hd V647))
     (and (cons? (tl V647))
      (and (= null (hd (tl V647))) (cons? (tl (tl V647)))))))
   (tl (tl (tl V647))))
  ((and (cons? V647)
    (and (= package (hd V647))
     (and (cons? (tl V647)) (cons? (tl (tl V647))))))
   (shen-packageh (hd (tl V647)) (hd (tl (tl V647))) Code))
  (true (shen-sys-error shen-package-contents))))

(defun shen-walk (V648 V649)
 (cond ((cons? V649) (V648 (map (lambda Z (shen-walk V648 Z)) V649)))
  (true (V648 V649))))

(defun compile (V650 V651 V652)
 (let O (V650 (@p V651 ()))
  (if (or (= (fail) O) (not (empty? (fst O)))) (shen-compile-error O V652)
   (snd O))))

(defun shen-compile-error (V665 V666)
 (cond ((= () V666) (fail))
  ((and (tuple? V665) (cons? (fst V665))) (V666 (fst V665)))
  (true (interror "syntax error~%" ()))))

(defun <e> (V671)
 (cond ((tuple? V671) (@p (fst V671) ())) (true (shen-sys-error <e>))))

(defun fail-if (V672 V673) (if (V672 V673) (fail) V673))

(defun @s (V674 V675) (cn V674 V675))

(defun tc? (V680) (value shen-*tc*))

(defun ps (V681)
 (trap-error (get V681 shen-source (value shen-*property-vector*))
  (lambda E (interror "~A not found.~%" (@p V681 ())))))

(defun explode (V682)
 (if (string? V682) (shen-explode-string V682)
  (explode (intmake-string "~A" (@p V682 ())))))

(defun shen-explode-string (V683)
 (cond ((= "" V683) ())
  (true
   (let S (pos V683 0)
    (let Ss (tlstr V683)
     (if (= Ss shen-eos) () (cons S (shen-explode-string Ss))))))))

(defun stinput (V688) (value *stinput*))

(defun shen-+vector? (V689)
 (and (absvector? V689) (> (<-address V689 0) 0)))

(defun vector (V690)
 (let Vector (absvector (+ V690 1)) (address-> Vector 0 V690)))

(defun shen-fillvector (V693 V694 V695 V696)
 (cond ((= V695 V694) V693)
  (true (shen-fillvector (address-> V693 V694 V696) (+ 1 V694) V695 V696))))

(defun vector? (V698)
 (and (absvector? V698)
  (trap-error (>= (<-address V698 0) 0) (lambda E false))))

(defun vector-> (V699 V700 V701)
 (if (= V700 0) (interror "cannot access 0th element of a vector~%" ())
  (address-> V699 V700 V701)))

(defun <-vector (V702 V703)
 (if (= V703 0) (interror "cannot access 0th element of a vector~%" ())
  (let VectorElement (<-address V702 V703)
   (if (= VectorElement (fail)) (interror "vector element not found~%" ())
    VectorElement))))

(defun shen-posint? (V704) (and (integer? V704) (>= V704 0)))

(defun limit (V705) (<-address V705 0))

(defun symbol? (V706)
 (cond ((or (boolean? V706) (number? V706)) false)
  (true
   (trap-error
    (let String (str V706)
     (let Unit (pos String 0)
      (element? Unit
       (cons "A"
        (cons "B"
         (cons "C"
          (cons "D"
           (cons "E"
            (cons "F"
             (cons "G"
              (cons "H"
               (cons "I"
                (cons "J"
                 (cons "K"
                  (cons "L"
                   (cons "M"
                    (cons "N"
                     (cons "O"
                      (cons "P"
                       (cons "Q"
                        (cons "R"
                         (cons "S"
                          (cons "T"
                           (cons "U"
                            (cons "V"
                             (cons "W"
                              (cons "X"
                               (cons "Y"
                                (cons "Z"
                                 (cons "a"
                                  (cons "b"
                                   (cons "c"
                                    (cons "d"
                                     (cons "e"
                                      (cons "f"
                                       (cons "g"
                                        (cons "h"
                                         (cons "i"
                                          (cons "j"
                                           (cons "k"
                                            (cons "l"
                                             (cons "m"
                                              (cons "n"
                                               (cons "o"
                                                (cons "p"
                                                 (cons "q"
                                                  (cons "r"
                                                   (cons "s"
                                                    (cons "t"
                                                     (cons "u"
                                                      (cons "v"
                                                       (cons "w"
                                                        (cons "x"
                                                         (cons "y"
                                                          (cons "z"
                                                           (cons "="
                                                            (cons "*"
                                                             (cons "/"
                                                              (cons "+"
                                                               (cons "-"
                                                                (cons "_"
                                                                 (cons "?"
                                                                  (cons "$"
                                                                   (cons "!"
                                                                    (cons "@"
                                                                     (cons "~"
                                                                      (cons ">"
                                                                       (cons
                                                                        "<"
                                                                        (cons
                                                                         "&"
                                                                         (cons
                                                                          "%"
                                                                          (cons
                                                                           "{"
                                                                           (cons
                                                                            "}"
                                                                            (cons
                                                                             ":"
                                                                             (cons
                                                                              ";"
                                                                              ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    (lambda E false)))))

(defun variable? (V707)
 (trap-error
  (let String (str V707)
   (let Unit (pos String 0)
    (element? Unit
     (cons "A"
      (cons "B"
       (cons "C"
        (cons "D"
         (cons "E"
          (cons "F"
           (cons "G"
            (cons "H"
             (cons "I"
              (cons "J"
               (cons "K"
                (cons "L"
                 (cons "M"
                  (cons "N"
                   (cons "O"
                    (cons "P"
                     (cons "Q"
                      (cons "R"
                       (cons "S"
                        (cons "T"
                         (cons "U"
                          (cons "V"
                           (cons "W"
                            (cons "X"
                             (cons "Y"
                              (cons "Z" ())))))))))))))))))))))))))))))
  (lambda E false)))

(defun gensym (V708)
 (concat V708 (set shen-*gensym* (+ 1 (value shen-*gensym*)))))

(defun concat (V709 V710) (intern (cn (str V709) (str V710))))

(defun @p (V711 V712)
 (let Vector (absvector 3)
  (let Tag (address-> Vector 0 shen-tuple)
   (let Fst (address-> Vector 1 V711)
    (let Snd (address-> Vector 2 V712) Vector)))))

(defun fst (V713) (<-address V713 1))

(defun snd (V714) (<-address V714 2))

(defun tuple? (V715)
 (trap-error (and (absvector? V715) (= shen-tuple (<-address V715 0)))
  (lambda E false)))

(defun append (V716 V717)
 (cond ((= () V716) V717)
  ((cons? V716) (cons (hd V716) (append (tl V716) V717)))
  (true (shen-sys-error append))))

(defun @v (V718 V719)
 (let Limit (limit V719)
  (let NewVector (vector (+ Limit 1))
   (let X+NewVector (vector-> NewVector 1 V718)
    (if (= Limit 0) X+NewVector (shen-@v-help V719 1 Limit X+NewVector))))))

(defun shen-@v-help (V720 V721 V722 V723)
 (cond ((= V722 V721) (shen-copyfromvector V720 V723 V722 (+ V722 1)))
  (true
   (shen-@v-help V720 (+ V721 1) V722
    (shen-copyfromvector V720 V723 V721 (+ V721 1))))))

(defun shen-copyfromvector (V725 V726 V727 V728)
 (trap-error (vector-> V726 V728 (<-vector V725 V727)) (lambda E V726)))

(defun hdv (V729)
 (trap-error (<-vector V729 1)
  (lambda E
   (interror "hdv needs a non-empty vector as an argument; not ~S~%"
    (@p V729 ())))))

(defun tlv (V730)
 (let Limit (limit V730)
  (if (= Limit 0)
   (interror "cannot take the tail of the empty vector~%" ())
   (if (= Limit 1) (vector 0)
    (let NewVector (vector (- Limit 1))
     (shen-tlv-help V730 2 Limit (vector (- Limit 1))))))))

(defun shen-tlv-help (V731 V732 V733 V734)
 (cond ((= V733 V732) (shen-copyfromvector V731 V734 V733 (- V733 1)))
  (true
   (shen-tlv-help V731 (+ V732 1) V733
    (shen-copyfromvector V731 V734 V732 (- V732 1))))))

(defun assoc (V744 V745)
 (cond ((= () V745) ())
  ((and (cons? V745) (and (cons? (hd V745)) (= (hd (hd V745)) V744)))
   (hd V745))
  ((cons? V745) (assoc V744 (tl V745))) (true (shen-sys-error assoc))))

(defun boolean? (V751)
 (cond ((= true V751) true) ((= false V751) true) (true false)))

(defun nl (V752)
 (cond ((= 0 V752) 0) (true (do (intoutput "~%" ()) (nl (- V752 1))))))

(defun difference (V755 V756)
 (cond ((= () V755) ())
  ((cons? V755)
   (if (element? (hd V755) V756) (difference (tl V755) V756)
    (cons (hd V755) (difference (tl V755) V756))))
  (true (shen-sys-error difference))))

(defun do (V757 V758) V758)

(defun element? (V767 V768)
 (cond ((= () V768) false) ((and (cons? V768) (= (hd V768) V767)) true)
  ((cons? V768) (element? V767 (tl V768))) (true (shen-sys-error element?))))

(defun empty? (V774) (cond ((= () V774) true) (true false)))

(defun fix (V775 V776) (shen-fix-help V775 V776 (V775 V776)))

(defun shen-fix-help (V783 V784 V785)
 (cond ((= V785 V784) V785) (true (shen-fix-help V783 V785 (V783 V785)))))

(defun put (V787 V788 V789 V790)
 (let N (hash V787 (limit V790))
  (let Entry (trap-error (<-vector V790 N) (lambda E ()))
   (let Change
    (vector-> V790 N (shen-change-pointer-value V787 V788 V789 Entry)) V789))))

(defun shen-change-pointer-value (V793 V794 V795 V796)
 (cond ((= () V796) (cons (cons (cons V793 (cons V794 ())) V795) ()))
  ((and (cons? V796)
    (and (cons? (hd V796))
     (and (cons? (hd (hd V796)))
      (and (cons? (tl (hd (hd V796))))
       (and (= () (tl (tl (hd (hd V796)))))
        (and (= (hd (tl (hd (hd V796)))) V794)
         (= (hd (hd (hd V796))) V793)))))))
   (cons (cons (hd (hd V796)) V795) (tl V796)))
  ((cons? V796)
   (cons (hd V796) (shen-change-pointer-value V793 V794 V795 (tl V796))))
  (true (shen-sys-error shen-change-pointer-value))))

(defun get (V799 V800 V801)
 (let N (hash V799 (limit V801))
  (let Entry
   (trap-error (<-vector V801 N)
    (lambda E (interror "pointer not found~%" ())))
   (let Result (assoc (cons V799 (cons V800 ())) Entry)
    (if (empty? Result) (interror "value not found~%" ()) (tl Result))))))

(defun hash (V802 V803)
 (let Hash
  (shen-mod (sum (map (lambda V804 (string->n V804)) (explode V802))) V803)
  (if (= 0 Hash) 1 Hash)))

(defun shen-mod (V805 V806)
 (shen-modh V805 (shen-multiples V805 (cons V806 ()))))

(defun shen-multiples (V807 V808)
 (cond ((and (cons? V808) (> (hd V808) V807)) (tl V808))
  ((cons? V808) (shen-multiples V807 (cons (* 2 (hd V808)) V808)))
  (true (shen-sys-error shen-multiples))))

(defun shen-modh (V811 V812)
 (cond ((= 0 V811) 0) ((= () V812) V811)
  ((and (cons? V812) (> (hd V812) V811))
   (if (empty? (tl V812)) V811 (shen-modh V811 (tl V812))))
  ((cons? V812) (shen-modh (- V811 (hd V812)) V812))
  (true (shen-sys-error shen-modh))))

(defun sum (V813)
 (cond ((= () V813) 0) ((cons? V813) (+ (hd V813) (sum (tl V813))))
  (true (shen-sys-error sum))))

(defun head (V820)
 (cond ((cons? V820) (hd V820))
  (true (interror "head expects a non-empty list" ()))))

(defun tail (V827)
 (cond ((cons? V827) (tl V827))
  (true (interror "tail expects a non-empty list" ()))))

(defun hdstr (V828) (pos V828 0))

(defun intersection (V831 V832)
 (cond ((= () V831) ())
  ((cons? V831)
   (if (element? (hd V831) V832) (cons (hd V831) (intersection (tl V831) V832))
    (intersection (tl V831) V832)))
  (true (shen-sys-error intersection))))

(defun reverse (V833) (shen-reverse_help V833 ()))

(defun shen-reverse_help (V834 V835)
 (cond ((= () V834) V835)
  ((cons? V834) (shen-reverse_help (tl V834) (cons (hd V834) V835)))
  (true (shen-sys-error shen-reverse_help))))

(defun union (V836 V837)
 (cond ((= () V836) V837)
  ((cons? V836)
   (if (element? (hd V836) V837) (union (tl V836) V837)
    (cons (hd V836) (union (tl V836) V837))))
  (true (shen-sys-error union))))

(defun y-or-n? (V838)
 (let Message (intoutput V838 ())
  (let Y-or-N (intoutput " (y/n) " ())
   (let Input (input)
    (if (= shen-y Input) true
     (if (= shen-n Input) false
      (do (intoutput "please answer y or n~%" ()) (y-or-n? V838))))))))

(defun not (V839) (if V839 false true))

(defun subst (V848 V849 V850)
 (cond ((= V850 V849) V848)
  ((cons? V850) (cons (subst V848 V849 (hd V850)) (subst V848 V849 (tl V850))))
  (true V850)))

(defun cd (V852)
 (set *home-directory*
  (if (= V852 "") "" (intmake-string "~A/" (@p V852 ())))))

(defun map (V855 V856)
 (cond ((= () V856) ())
  ((cons? V856) (cons (V855 (hd V856)) (map V855 (tl V856))))
  (true (shen-sys-error map))))

(defun length (V857) (shen-length-h V857 0))

(defun shen-length-h (V858 V859)
 (cond ((= () V858) V859) (true (shen-length-h (tl V858) (+ V859 1)))))

(defun occurrences (V868 V869)
 (cond ((= V869 V868) 1)
  ((cons? V869) (+ (occurrences V868 (hd V869)) (occurrences V868 (tl V869))))
  (true 0)))

(defun nth (V877 V878)
 (cond ((and (= 1 V877) (cons? V878)) (hd V878))
  ((cons? V878) (nth (- V877 1) (tl V878))) (true (shen-sys-error nth))))

(defun integer? (V879)
 (and (number? V879)
  (let Abs (shen-abs V879) (shen-integer-test? Abs (shen-magless Abs 1)))))

(defun shen-abs (V880) (if (> V880 0) V880 (- 0 V880)))

(defun shen-magless (V881 V882)
 (let Nx2 (* V882 2) (if (> Nx2 V881) V882 (shen-magless V881 Nx2))))

(defun shen-integer-test? (V886 V887)
 (cond ((= 0 V886) true) ((> 1 V886) false)
  (true
   (let Abs-N (- V886 V887)
    (if (> 0 Abs-N) (integer? V886) (shen-integer-test? Abs-N V887))))))

(defun mapcan (V890 V891)
 (cond ((= () V891) ())
  ((cons? V891) (append (V890 (hd V891)) (mapcan V890 (tl V891))))
  (true (shen-sys-error mapcan))))

(defun read-file-as-bytelist (V892)
 (let Stream (open file V892 in)
  (let Byte (read-byte Stream)
   (let Bytes (shen-read-file-as-bytelist-help Stream Byte ())
    (let Close (close Stream) (reverse Bytes))))))

(defun shen-read-file-as-bytelist-help (V893 V894 V895)
 (cond ((= -1 V894) V895)
  (true
   (shen-read-file-as-bytelist-help V893 (read-byte V893) (cons V894 V895)))))

(defun read-file-as-string (V896)
 (let Stream (open file V896 in) (shen-rfas-h Stream (read-byte Stream) "")))

(defun shen-rfas-h (V897 V898 V899)
 (cond ((= -1 V898) (do (close V897) V899))
  (true (shen-rfas-h V897 (read-byte V897) (cn V899 (n->string V898))))))

(defun == (V908 V909) (cond ((= V909 V908) true) (true false)))

(defun abort () (simple-error ""))

(defun read () (hd (lineread)))

(defun input () (eval (read)))

(defun input+ (V915 V916)
 (let Input (read)
  (let Check (shen-typecheck Input V916)
   (if (= false Check)
    (do (intoutput "input is not of type ~R: please re-enter " (@p V916 ()))
     (input+ : V916))
    (eval Input)))))

(defun bound? (V917)
 (and (symbol? V917)
  (let Val (trap-error (value V917) (lambda E shen-this-symbol-is-unbound))
   (if (= Val shen-this-symbol-is-unbound) false true))))

(defun shen-string->bytes (V918)
 (cond ((= "" V918) ())
  (true (cons (string->n (pos V918 0)) (shen-string->bytes (tlstr V918))))))

(defun maxinferences (V919) (set shen-*maxinferences* V919))

(defun inferences (V924) (value shen-*infs*))

(defun shen-hush (V929)
 (cond ((= + V929) (set shen-*hush* shen-hushed))
  ((= - V929) (set shen-*hush* shen-unhushed))
  (true (interror "'hush' expects a + or a -~%" ()))))

